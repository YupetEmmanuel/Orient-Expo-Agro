{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Orient Marketplace\n\n## Overview\n\nOrient is a vendor marketplace platform that connects customers with quality vendors and their products. The application is built as a full-stack web application with a React frontend and Express backend, using PostgreSQL for data persistence and Google Cloud Storage for file uploads. The platform supports three user roles: customers (who browse products), vendors (who manage their stores and products), and admins (who moderate the platform).\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server for fast HMR and optimized production builds\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management with built-in caching and refetching\n\n**UI Component System**\n- Radix UI primitives for accessible, unstyled component foundations\n- shadcn/ui component library (New York style) built on top of Radix UI\n- Tailwind CSS for utility-first styling with custom design tokens\n- CSS variables for theming (supports light/dark mode through class-based switching)\n\n**State Management Strategy**\n- Server state managed through TanStack Query with infinite stale time (manual invalidation)\n- Query client configured to throw on 401 errors by default, with special handling for auth endpoints\n- Authentication state accessed via custom `useAuth` hook that wraps user query\n- Form state managed locally with React Hook Form and Zod validation\n\n### Backend Architecture\n\n**Server Framework**\n- Express.js with TypeScript for type-safe API development\n- ESM modules throughout the codebase\n- Custom middleware for request logging and JSON response capture\n- Vite integration in development for SSR-like capabilities\n\n**Authentication & Session Management**\n- Replit Auth (OpenID Connect) for authentication\n- Passport.js with OpenID Client strategy for OAuth flow\n- PostgreSQL-backed session storage using connect-pg-simple\n- Session cookies with 1-week TTL, HTTP-only, and secure flags\n- User sessions stored in `sessions` table with automatic cleanup\n\n**Database Layer**\n- Drizzle ORM with Neon serverless PostgreSQL driver\n- WebSocket connections for serverless compatibility\n- Schema-first approach with Zod validation schemas derived from Drizzle tables\n- Connection pooling through `@neondatabase/serverless` Pool\n\n**Data Model**\n- Users table with role-based access (customer, vendor, admin)\n- Vendors table linked to users, with approval workflow (pending, approved, rejected)\n- Products table with vendor relationships and status tracking (active, inactive, flagged)\n- Categories table with slug-based routing\n- Sessions table for authentication state\n\n**API Design Pattern**\n- RESTful endpoints with resource-based routing\n- Role-based access control middleware (`isAuthenticated` for protected routes)\n- Consistent error handling with HTTP status codes\n- JSON request/response bodies with Zod schema validation\n\n### File Upload & Storage\n\n**Object Storage Service**\n- Google Cloud Storage integration for file uploads\n- Custom `ObjectStorageService` class abstracting storage operations\n- Replit sidecar authentication for GCS access (external account credentials)\n- ACL (Access Control List) policy system for fine-grained object permissions\n- Uppy file uploader on frontend with AWS S3-compatible protocol\n- Direct-to-storage uploads using presigned URLs\n\n**ACL Architecture**\n- Custom metadata-based ACL policies stored with objects\n- Support for multiple access group types (extensible enum design)\n- Permission types: READ and WRITE\n- ACL rules combining access groups with permissions\n\n### PWA Capabilities\n\n**Progressive Web App Features**\n- Service worker for offline functionality and caching\n- Web app manifest for installability\n- Cache-first strategy for static assets, network-first for API calls\n- Runtime caching for dynamic content\n- Icons and splash screens for mobile experience\n\n## External Dependencies\n\n### Cloud Services\n- **Neon Database**: Serverless PostgreSQL hosting with WebSocket support\n- **Google Cloud Storage**: Object storage for user-uploaded files (product images, vendor logos)\n- **Replit Authentication**: OpenID Connect provider for user authentication\n- **Replit Object Storage Sidecar**: Local proxy for GCS credential management\n\n### Third-Party Libraries\n\n**Frontend**\n- `@tanstack/react-query`: Server state management and caching\n- `@radix-ui/*`: Accessible UI component primitives (20+ components)\n- `wouter`: Lightweight routing library\n- `react-hook-form` + `@hookform/resolvers`: Form handling with validation\n- `@uppy/core`, `@uppy/react`, `@uppy/dashboard`, `@uppy/aws-s3`: File upload UI and logic\n- `zod`: Schema validation for forms and API data\n- `tailwindcss`: Utility-first CSS framework\n- `class-variance-authority` + `clsx`: Conditional CSS class composition\n\n**Backend**\n- `drizzle-orm`: Type-safe SQL query builder and ORM\n- `@neondatabase/serverless`: PostgreSQL driver with serverless support\n- `openid-client`: OpenID Connect client implementation\n- `passport`: Authentication middleware\n- `express-session` + `connect-pg-simple`: Session management\n- `@google-cloud/storage`: GCS SDK for file operations\n- `memoizee`: Function memoization for OIDC config caching\n\n**Development Tools**\n- `vite`: Build tool and dev server\n- `typescript`: Static type checking\n- `tsx`: TypeScript execution for development server\n- `esbuild`: Production build for backend\n- `@replit/vite-plugin-*`: Replit-specific dev tools (cartographer, error overlay, dev banner)","size_bytes":5712},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2915},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"public/service-worker.js":{"content":"const CACHE_NAME = 'orient-marketplace-v1';\nconst RUNTIME_CACHE = 'orient-runtime-v1';\n\n// Assets to cache on install\nconst PRECACHE_URLS = [\n  '/',\n  '/manifest.json',\n  '/icon.svg',\n  '/icon-192.png',\n  '/icon-512.png',\n];\n\n// Install event - precache essential assets\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => cache.addAll(PRECACHE_URLS))\n      .then(() => self.skipWaiting())\n  );\n});\n\n// Activate event - cleanup old caches\nself.addEventListener('activate', (event) => {\n  const currentCaches = [CACHE_NAME, RUNTIME_CACHE];\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return cacheNames.filter((cacheName) => !currentCaches.includes(cacheName));\n    }).then((cachesToDelete) => {\n      return Promise.all(cachesToDelete.map((cacheToDelete) => {\n        return caches.delete(cacheToDelete);\n      }));\n    }).then(() => self.clients.claim())\n  );\n});\n\n// Fetch event - network first, fallback to cache strategy\nself.addEventListener('fetch', (event) => {\n  // Skip cross-origin requests\n  if (!event.request.url.startsWith(self.location.origin)) {\n    return;\n  }\n\n  // Skip non-GET requests\n  if (event.request.method !== 'GET') {\n    return;\n  }\n\n  // API requests - network first, fallback to cache\n  if (event.request.url.includes('/api/')) {\n    event.respondWith(\n      fetch(event.request)\n        .then((response) => {\n          // Clone the response before caching\n          const responseToCache = response.clone();\n          caches.open(RUNTIME_CACHE)\n            .then((cache) => {\n              cache.put(event.request, responseToCache);\n            });\n          return response;\n        })\n        .catch(() => {\n          // If network fails, try cache\n          return caches.match(event.request);\n        })\n    );\n    return;\n  }\n\n  // Static assets - cache first, fallback to network\n  event.respondWith(\n    caches.match(event.request)\n      .then((cachedResponse) => {\n        if (cachedResponse) {\n          return cachedResponse;\n        }\n\n        return fetch(event.request).then((response) => {\n          // Don't cache non-successful responses\n          if (!response || response.status !== 200 || response.type !== 'basic') {\n            return response;\n          }\n\n          // Clone the response before caching\n          const responseToCache = response.clone();\n          caches.open(RUNTIME_CACHE)\n            .then((cache) => {\n              cache.put(event.request, responseToCache);\n            });\n\n          return response;\n        });\n      })\n  );\n});\n\n// Message event - allow clients to skip waiting\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n});\n","size_bytes":2780},"server/db.ts":{"content":"import pg from 'pg';\nconst { Pool } = pg;\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: { rejectUnauthorized: false },\n  max: 1,\n});\n\nexport const db = drizzle(pool, { schema });\n","size_bytes":446},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { initializeDatabase } from \"./db-init\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize database tables if they don't exist\n  await initializeDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2343},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertListingSchema,\n  insertCropInfoSchema,\n  insertQuestionSchema,\n  insertAnswerSchema,\n  type Listing,\n} from \"@shared/schema\";\nimport { ObjectStorageService, objectStorageClient } from \"./objectStorage\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\n// Helper function to remove password from listing\nfunction sanitizeListing(listing: Listing): Omit<Listing, 'password'> {\n  const { password, ...sanitized } = listing;\n  return sanitized;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Listing routes\n  app.get(\"/api/listings\", async (req, res) => {\n    try {\n      const { role, cropType, search } = req.query;\n      const listings = await storage.getListings({\n        role: role as string,\n        cropType: cropType as string,\n        search: search as string,\n      });\n      // Remove passwords from response\n      const sanitizedListings = listings.map(sanitizeListing);\n      res.json(sanitizedListings);\n    } catch (error) {\n      console.error(\"Error fetching listings:\", error);\n      res.status(500).json({ message: \"Failed to fetch listings\" });\n    }\n  });\n\n  app.get(\"/api/listings/:id\", async (req, res) => {\n    try {\n      const listing = await storage.getListing(req.params.id);\n      if (!listing) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      // Remove password from response\n      res.json(sanitizeListing(listing));\n    } catch (error) {\n      console.error(\"Error fetching listing:\", error);\n      res.status(500).json({ message: \"Failed to fetch listing\" });\n    }\n  });\n\n  app.post(\"/api/listings\", async (req, res) => {\n    try {\n      const validated = insertListingSchema.parse(req.body);\n      // Hash password before storing\n      const hashedPassword = await bcrypt.hash(validated.password, 10);\n      const listing = await storage.createListing({\n        ...validated,\n        password: hashedPassword,\n      });\n      // Remove password from response\n      res.json(sanitizeListing(listing));\n    } catch (error: any) {\n      console.error(\"Error creating listing:\", error);\n      // If it's a Zod validation error, return the specific error\n      if (error.name === 'ZodError') {\n        const firstError = error.errors[0];\n        return res.status(400).json({ \n          message: `${firstError.path.join('.')}: ${firstError.message}` \n        });\n      }\n      res.status(400).json({ message: error.message || \"Failed to create listing\" });\n    }\n  });\n\n  app.patch(\"/api/listings/:id\", async (req, res) => {\n    try {\n      const validated = insertListingSchema.partial().parse(req.body);\n      // If password is being updated, hash it\n      if (validated.password) {\n        validated.password = await bcrypt.hash(validated.password, 10);\n      }\n      const listing = await storage.updateListing(req.params.id, validated);\n      if (!listing) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      // Remove password from response\n      res.json(sanitizeListing(listing));\n    } catch (error) {\n      console.error(\"Error updating listing:\", error);\n      res.status(400).json({ message: \"Failed to update listing\" });\n    }\n  });\n\n  app.delete(\"/api/listings/:id\", async (req, res) => {\n    try {\n      const { vendorName, password } = req.body;\n      \n      if (!vendorName || !password) {\n        return res.status(400).json({ message: \"Vendor name and password are required\" });\n      }\n      \n      // Get the listing first to verify credentials\n      const listing = await storage.getListing(req.params.id);\n      if (!listing) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      \n      // Verify vendor name and compare hashed password\n      const passwordMatch = await bcrypt.compare(password, listing.password);\n      if (listing.vendorName !== vendorName || !passwordMatch) {\n        return res.status(403).json({ message: \"Invalid vendor name or password\" });\n      }\n      \n      await storage.deleteListing(req.params.id);\n      res.json({ message: \"Listing deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting listing:\", error);\n      res.status(500).json({ message: \"Failed to delete listing\" });\n    }\n  });\n\n  // Image upload route\n  app.post(\"/api/upload-image\", async (req, res) => {\n    try {\n      const objectStorage = new ObjectStorageService();\n      const publicPaths = objectStorage.getPublicObjectSearchPaths();\n      \n      if (publicPaths.length === 0) {\n        throw new Error(\"No public object storage paths configured\");\n      }\n      \n      // Get the first public path (e.g., \"/bucket-name/public\")\n      const publicPath = publicPaths[0];\n      const uniqueFileName = randomUUID();\n      const fullPath = `${publicPath}/listings/${uniqueFileName}.jpg`;\n      \n      // Parse bucket and object name\n      const pathParts = fullPath.split(\"/\").filter(p => p);\n      const bucketName = pathParts[0];\n      const objectName = pathParts.slice(1).join(\"/\");\n      \n      // Generate presigned upload URL\n      const REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n      const request = {\n        bucket_name: bucketName,\n        object_name: objectName,\n        method: \"PUT\",\n        expires_at: new Date(Date.now() + 900000).toISOString(), // 15 minutes\n      };\n      \n      const response = await fetch(\n        `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(request),\n        }\n      );\n      \n      if (!response.ok) {\n        throw new Error(`Failed to sign object URL: ${response.status}`);\n      }\n      \n      const { signed_url: uploadUrl } = await response.json();\n      \n      // Return a proxied URL that will serve the image through our backend\n      // This works around the public access prevention on the GCS bucket\n      const publicUrl = `/api/images/${encodeURIComponent(bucketName)}/${encodeURIComponent(objectName)}`;\n      \n      res.json({\n        uploadUrl,\n        publicUrl,\n        bucketName,\n        objectName,\n      });\n    } catch (error) {\n      console.error(\"Error generating upload URL:\", error);\n      res.status(500).json({ message: \"Failed to generate upload URL\" });\n    }\n  });\n\n  // Serve images from GCS (proxy endpoint)\n  app.get(\"/api/images/:bucketName/:objectPath(*)\", async (req, res) => {\n    try {\n      const { bucketName, objectPath } = req.params;\n      \n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectPath);\n      \n      // Check if file exists\n      const [exists] = await file.exists();\n      if (!exists) {\n        return res.status(404).json({ message: \"Image not found\" });\n      }\n      \n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"image/jpeg\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": \"public, max-age=31536000\", // Cache for 1 year\n      });\n      \n      // Stream the file to the response\n      const stream = file.createReadStream();\n      \n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n      \n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error serving image:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ message: \"Failed to serve image\" });\n      }\n    }\n  });\n\n  // Crop Info routes\n  app.get(\"/api/crop-info\", async (req, res) => {\n    try {\n      const { search } = req.query;\n      const cropInfoList = search\n        ? await storage.searchCropInfo(search as string)\n        : await storage.getAllCropInfo();\n      res.json(cropInfoList);\n    } catch (error) {\n      console.error(\"Error fetching crop info:\", error);\n      res.status(500).json({ message: \"Failed to fetch crop info\" });\n    }\n  });\n\n  app.get(\"/api/crop-info/:id\", async (req, res) => {\n    try {\n      const info = await storage.getCropInfo(req.params.id);\n      if (!info) {\n        return res.status(404).json({ message: \"Crop info not found\" });\n      }\n      res.json(info);\n    } catch (error) {\n      console.error(\"Error fetching crop info:\", error);\n      res.status(500).json({ message: \"Failed to fetch crop info\" });\n    }\n  });\n\n  app.post(\"/api/crop-info\", async (req, res) => {\n    try {\n      const validated = insertCropInfoSchema.parse(req.body);\n      const info = await storage.createCropInfo(validated);\n      res.json(info);\n    } catch (error) {\n      console.error(\"Error creating crop info:\", error);\n      res.status(400).json({ message: \"Failed to create crop info\" });\n    }\n  });\n\n  app.patch(\"/api/crop-info/:id\", async (req, res) => {\n    try {\n      const validated = insertCropInfoSchema.partial().parse(req.body);\n      const info = await storage.updateCropInfo(req.params.id, validated);\n      if (!info) {\n        return res.status(404).json({ message: \"Crop info not found\" });\n      }\n      res.json(info);\n    } catch (error) {\n      console.error(\"Error updating crop info:\", error);\n      res.status(400).json({ message: \"Failed to update crop info\" });\n    }\n  });\n\n  app.delete(\"/api/crop-info/:id\", async (req, res) => {\n    try {\n      await storage.deleteCropInfo(req.params.id);\n      res.json({ message: \"Crop info deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting crop info:\", error);\n      res.status(500).json({ message: \"Failed to delete crop info\" });\n    }\n  });\n\n  // Question routes\n  app.get(\"/api/questions\", async (req, res) => {\n    try {\n      const { search } = req.query;\n      const questions = search\n        ? await storage.searchQuestions(search as string)\n        : await storage.getAllQuestions();\n      res.json(questions);\n    } catch (error) {\n      console.error(\"Error fetching questions:\", error);\n      res.status(500).json({ message: \"Failed to fetch questions\" });\n    }\n  });\n\n  app.get(\"/api/questions/:id\", async (req, res) => {\n    try {\n      const question = await storage.getQuestion(req.params.id);\n      if (!question) {\n        return res.status(404).json({ message: \"Question not found\" });\n      }\n      res.json(question);\n    } catch (error) {\n      console.error(\"Error fetching question:\", error);\n      res.status(500).json({ message: \"Failed to fetch question\" });\n    }\n  });\n\n  app.post(\"/api/questions\", async (req, res) => {\n    try {\n      const validated = insertQuestionSchema.parse(req.body);\n      const question = await storage.createQuestion(validated);\n      res.json(question);\n    } catch (error: any) {\n      console.error(\"Error creating question:\", error);\n      if (error.name === 'ZodError') {\n        const firstError = error.errors[0];\n        return res.status(400).json({ \n          message: `${firstError.path.join('.')}: ${firstError.message}` \n        });\n      }\n      res.status(400).json({ message: error.message || \"Failed to create question\" });\n    }\n  });\n\n  app.delete(\"/api/questions/:id\", async (req, res) => {\n    try {\n      await storage.deleteQuestion(req.params.id);\n      res.json({ message: \"Question deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting question:\", error);\n      res.status(500).json({ message: \"Failed to delete question\" });\n    }\n  });\n\n  // Answer routes\n  app.get(\"/api/questions/:questionId/answers\", async (req, res) => {\n    try {\n      const answers = await storage.getAnswersByQuestionId(req.params.questionId);\n      res.json(answers);\n    } catch (error) {\n      console.error(\"Error fetching answers:\", error);\n      res.status(500).json({ message: \"Failed to fetch answers\" });\n    }\n  });\n\n  app.post(\"/api/answers\", async (req, res) => {\n    try {\n      const validated = insertAnswerSchema.parse(req.body);\n      const answer = await storage.createAnswer(validated);\n      res.json(answer);\n    } catch (error: any) {\n      console.error(\"Error creating answer:\", error);\n      if (error.name === 'ZodError') {\n        const firstError = error.errors[0];\n        return res.status(400).json({ \n          message: `${firstError.path.join('.')}: ${firstError.message}` \n        });\n      }\n      res.status(400).json({ message: error.message || \"Failed to create answer\" });\n    }\n  });\n\n  app.delete(\"/api/answers/:id\", async (req, res) => {\n    try {\n      await storage.deleteAnswer(req.params.id);\n      res.json({ message: \"Answer deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting answer:\", error);\n      res.status(500).json({ message: \"Failed to delete answer\" });\n    }\n  });\n\n  // Seed questions endpoint\n  app.post(\"/api/seed-questions\", async (req, res) => {\n    try {\n      const questionsData = [\n        {\n          title: \"How do I contact a vendor?\",\n          body: \"I found a product I like and want to reach out to the seller. How can I contact them?\",\n          authorName: \"Sarah Johnson\",\n          answers: [{\n            body: \"To contact a vendor on Orient, simply view any product listing and scroll down to the \\\"Contact Vendor\\\" section. You will find the vendor's phone number and email address displayed there. You can call them directly or send them an email to inquire about the product, discuss pricing, arrange pickup, or ask any questions you have. No account or login is required!\",\n            authorName: \"Orient Support Team\",\n          }],\n        },\n        {\n          title: \"How do I post an item for sale?\",\n          body: \"I am a vendor and want to list my products on Orient. What are the steps to upload an item?\",\n          authorName: \"Farm Owner Mike\",\n          answers: [{\n            body: \"Posting an item on Orient is easy! First, go to the home page and click the \\\"Post Item\\\" button at the top. You will see a form where you need to fill in: your vendor name, item name, description, price, category (vegetables, fruits, grains, or livestock), contact phone, contact email, and a password. You can also upload a photo of your product. The password is important - you will need it later if you want to delete your listing. Once you fill everything out, click \\\"Post Listing\\\" and your item will be live on the marketplace immediately!\",\n            authorName: \"Farmer Joe\",\n          }],\n        },\n        {\n          title: \"How do I browse products on Orient?\",\n          body: \"I am new to Orient and want to see what products are available. How do I navigate the marketplace?\",\n          authorName: \"New User\",\n          answers: [{\n            body: \"Browsing products on Orient is simple! When you open the app, you will see the home page with all available products displayed as cards. Each card shows the item name, vendor name, price, and category. You can scroll through all the listings to see what's available. If you want to see more details about a specific product, just tap on the product card and it will take you to the full product page with description, vendor contact information, and more details.\",\n            authorName: \"Happy Customer\",\n          }],\n        },\n        {\n          title: \"Can I filter products by category?\",\n          body: \"I am only interested in certain types of products. Is there a way to filter what I see?\",\n          authorName: \"Busy Shopper\",\n          answers: [{\n            body: \"Yes! Orient has a category filter to help you find exactly what you are looking for. At the top of the home page, you will see a dropdown menu labeled \\\"Filter by Category\\\". Click on it and you can choose from: All Categories, Vegetables, Fruits, Grains, or Livestock. Select the category you want and the page will instantly show only products from that category. This makes it much easier to find specific types of products without scrolling through everything!\",\n            authorName: \"Tech Helper\",\n          }],\n        },\n        {\n          title: \"Do I need to create an account to use Orient?\",\n          body: \"I want to know if I need to sign up or register to browse and buy products.\",\n          authorName: \"Anonymous User\",\n          answers: [{\n            body: \"No, you do not need to create an account to use Orient! The platform is designed to be simple and accessible for everyone. Buyers can browse all products and contact vendors without signing up or logging in. Vendors can post their products without creating an account - they just need to set a password for their listing so they can delete it later if needed. Orient is all about making it easy for farmers and buyers to connect without barriers!\",\n            authorName: \"Orient Team\",\n          }],\n        },\n        {\n          title: \"What is Orient?\",\n          body: \"I just heard about Orient. Can someone explain what this platform is for?\",\n          authorName: \"Curious Visitor\",\n          answers: [{\n            body: \"Orient is a mobile-friendly marketplace platform that connects farmers and food vendors with buyers in their community. It is designed specifically for local food producers to showcase their fresh products like vegetables, fruits, grains, and livestock. Buyers can browse available products, see prices, read descriptions, and contact vendors directly. The platform is simple to use - no complicated signup process, no lengthy forms. Just post your products or browse what is available, and connect directly with local producers and customers!\",\n            authorName: \"Platform Admin\",\n          }],\n        },\n        {\n          title: \"How do I edit or delete my listing?\",\n          body: \"I posted an item but need to make changes or remove it. How can I do that?\",\n          authorName: \"Vendor Anna\",\n          answers: [{\n            body: \"To delete your listing on Orient, go to the product page for the item you posted. At the bottom of the page, you will see a \\\"Delete Listing\\\" button. Click it and you will be asked to enter your vendor name and the password you set when you created the listing. Once you confirm, your listing will be permanently removed. Currently, Orient does not support editing listings - if you need to make changes, you will need to delete the old listing and create a new one with the updated information.\",\n            authorName: \"Vendor Support\",\n          }],\n        },\n        {\n          title: \"Are the products on Orient locally sourced?\",\n          body: \"I prefer to buy local. Can I find farmers and food vendors from my area on Orient?\",\n          authorName: \"Local Food Supporter\",\n          answers: [{\n            body: \"Yes! Orient is specifically designed for local farmers and food vendors in your area. All products listed on the platform come from local vendors, farmers, and small food producers in your community. When you view a product, you can see the vendor's contact information and reach out to them directly to learn more about where their products come from, their farming practices, and delivery or pickup options. By using Orient, you are supporting local businesses and your local food economy!\",\n            authorName: \"Local Food Advocate\",\n          }],\n        },\n        {\n          title: \"How do I contact Orient Expo?\",\n          body: \"I have a question or need help with something on Orient. How can I reach out to the Orient team?\",\n          authorName: \"Community Member\",\n          answers: [{\n            body: \"You can contact us directly through this Q&A section! Simply click the \\\"Ask Question\\\" button and write your question. In the title field, include \\\"for orient\\\" so we know it is directed to our team, and we will respond to your question as soon as possible. This is the best way to get help, report issues, or share feedback about the Orient platform.\",\n            authorName: \"Orient Expo Team\",\n          }],\n        },\n      ];\n\n      let questionsAdded = 0;\n      let answersAdded = 0;\n\n      for (const questionData of questionsData) {\n        // Check if question already exists\n        const existing = await storage.getAllQuestions();\n        const alreadyExists = existing.some(q => q.title === questionData.title);\n\n        if (alreadyExists) {\n          continue;\n        }\n\n        // Create question\n        const newQuestion = await storage.createQuestion({\n          title: questionData.title,\n          body: questionData.body,\n          authorName: questionData.authorName,\n        });\n\n        questionsAdded++;\n\n        // Create answers for this question\n        for (const answerData of questionData.answers) {\n          await storage.createAnswer({\n            questionId: newQuestion.id,\n            body: answerData.body,\n            authorName: answerData.authorName,\n          });\n          answersAdded++;\n        }\n      }\n\n      res.json({\n        success: true,\n        questionsAdded,\n        answersAdded,\n        message: `Successfully seeded ${questionsAdded} questions and ${answersAdded} answers`,\n      });\n    } catch (error) {\n      console.error(\"Error seeding questions:\", error);\n      res.status(500).json({ message: \"Failed to seed questions\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":21470},"server/storage.ts":{"content":"import {\n  listings,\n  cropInfo,\n  questions,\n  answers,\n  type Listing,\n  type InsertListing,\n  type CropInfo,\n  type InsertCropInfo,\n  type Question,\n  type InsertQuestion,\n  type Answer,\n  type InsertAnswer,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, like, or, and, SQL, ilike, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Listing operations\n  getListing(id: string): Promise<Listing | undefined>;\n  getListings(filters?: {\n    role?: string;\n    cropType?: string;\n    search?: string;\n  }): Promise<Listing[]>;\n  createListing(listing: InsertListing): Promise<Listing>;\n  updateListing(\n    id: string,\n    updates: Partial<InsertListing>\n  ): Promise<Listing | undefined>;\n  deleteListing(id: string): Promise<void>;\n\n  // Crop Info operations\n  getCropInfo(id: string): Promise<CropInfo | undefined>;\n  getAllCropInfo(): Promise<CropInfo[]>;\n  searchCropInfo(query: string): Promise<CropInfo[]>;\n  createCropInfo(info: InsertCropInfo): Promise<CropInfo>;\n  updateCropInfo(\n    id: string,\n    updates: Partial<InsertCropInfo>\n  ): Promise<CropInfo | undefined>;\n  deleteCropInfo(id: string): Promise<void>;\n\n  // Question operations\n  getQuestion(id: string): Promise<Question | undefined>;\n  getAllQuestions(): Promise<Question[]>;\n  searchQuestions(query: string): Promise<Question[]>;\n  createQuestion(question: InsertQuestion): Promise<Question>;\n  deleteQuestion(id: string): Promise<void>;\n\n  // Answer operations\n  getAnswersByQuestionId(questionId: string): Promise<Answer[]>;\n  createAnswer(answer: InsertAnswer): Promise<Answer>;\n  deleteAnswer(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Listing operations\n  async getListing(id: string): Promise<Listing | undefined> {\n    const [listing] = await db\n      .select()\n      .from(listings)\n      .where(eq(listings.id, id));\n    return listing;\n  }\n\n  async getListings(filters?: {\n    role?: string;\n    cropType?: string;\n    search?: string;\n  }): Promise<Listing[]> {\n    const conditions: SQL[] = [];\n\n    if (filters?.role) {\n      conditions.push(eq(listings.role, filters.role));\n    }\n\n    if (filters?.cropType) {\n      conditions.push(eq(listings.cropType, filters.cropType));\n    }\n\n    if (filters?.search) {\n      conditions.push(\n        or(\n          like(listings.itemName, `%${filters.search}%`),\n          like(listings.description, `%${filters.search}%`),\n          like(listings.vendorName, `%${filters.search}%`)\n        )!\n      );\n    }\n\n    let query = db.select().from(listings);\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)!) as any;\n    }\n\n    const results = await query.orderBy(desc(listings.createdAt));\n    return results;\n  }\n\n  async createListing(listing: InsertListing): Promise<Listing> {\n    const [newListing] = await db\n      .insert(listings)\n      .values(listing)\n      .returning();\n    return newListing;\n  }\n\n  async updateListing(\n    id: string,\n    updates: Partial<InsertListing>\n  ): Promise<Listing | undefined> {\n    const [updated] = await db\n      .update(listings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(listings.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteListing(id: string): Promise<void> {\n    await db.delete(listings).where(eq(listings.id, id));\n  }\n\n  // Crop Info operations\n  async getCropInfo(id: string): Promise<CropInfo | undefined> {\n    const [info] = await db\n      .select()\n      .from(cropInfo)\n      .where(eq(cropInfo.id, id));\n    return info;\n  }\n\n  async getAllCropInfo(): Promise<CropInfo[]> {\n    return await db\n      .select()\n      .from(cropInfo)\n      .orderBy(desc(cropInfo.createdAt));\n  }\n\n  async searchCropInfo(query: string): Promise<CropInfo[]> {\n    return await db\n      .select()\n      .from(cropInfo)\n      .where(\n        or(\n          like(cropInfo.title, `%${query}%`),\n          like(cropInfo.body, `%${query}%`)\n        )\n      )\n      .orderBy(desc(cropInfo.createdAt));\n  }\n\n  async createCropInfo(info: InsertCropInfo): Promise<CropInfo> {\n    const [newInfo] = await db\n      .insert(cropInfo)\n      .values(info)\n      .returning();\n    return newInfo;\n  }\n\n  async updateCropInfo(\n    id: string,\n    updates: Partial<InsertCropInfo>\n  ): Promise<CropInfo | undefined> {\n    const [updated] = await db\n      .update(cropInfo)\n      .set(updates)\n      .where(eq(cropInfo.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteCropInfo(id: string): Promise<void> {\n    await db.delete(cropInfo).where(eq(cropInfo.id, id));\n  }\n\n  // Question operations\n  async getQuestion(id: string): Promise<Question | undefined> {\n    const [question] = await db\n      .select()\n      .from(questions)\n      .where(eq(questions.id, id));\n    return question;\n  }\n\n  async getAllQuestions(): Promise<Question[]> {\n    return await db\n      .select()\n      .from(questions)\n      .orderBy(desc(questions.createdAt));\n  }\n\n  async searchQuestions(query: string): Promise<Question[]> {\n    // Extract keywords from the search query\n    const keywords = query\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter(word => word.length > 2); // Filter out short words like \"to\", \"a\", etc.\n\n    if (keywords.length === 0) {\n      return await this.getAllQuestions();\n    }\n\n    // Build search conditions for each keyword using ilike for case-insensitive search\n    // Create an array of all conditions (title OR body for each keyword)\n    const searchConditions: any[] = [];\n    for (const keyword of keywords) {\n      searchConditions.push(ilike(questions.title, `%${keyword}%`));\n      searchConditions.push(ilike(questions.body, `%${keyword}%`));\n    }\n\n    // Combine all conditions with OR - match any keyword in either title or body\n    return await db\n      .select()\n      .from(questions)\n      .where(or(...searchConditions))\n      .orderBy(desc(questions.createdAt));\n  }\n\n  async createQuestion(question: InsertQuestion): Promise<Question> {\n    const [newQuestion] = await db\n      .insert(questions)\n      .values(question)\n      .returning();\n    return newQuestion;\n  }\n\n  async deleteQuestion(id: string): Promise<void> {\n    await db.delete(questions).where(eq(questions.id, id));\n  }\n\n  // Answer operations\n  async getAnswersByQuestionId(questionId: string): Promise<Answer[]> {\n    return await db\n      .select()\n      .from(answers)\n      .where(eq(answers.questionId, questionId))\n      .orderBy(desc(answers.createdAt));\n  }\n\n  async createAnswer(answer: InsertAnswer): Promise<Answer> {\n    const [newAnswer] = await db\n      .insert(answers)\n      .values(answer)\n      .returning();\n    return newAnswer;\n  }\n\n  async deleteAnswer(id: string): Promise<void> {\n    await db.delete(answers).where(eq(answers.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6841},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Listings - combines vendor and product info (no auth needed)\nexport const listings = pgTable(\"listings\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  role: varchar(\"role\").notNull(), // vendor or buyer\n  vendorName: text(\"vendor_name\").notNull(),\n  itemName: text(\"item_name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  cropType: text(\"crop_type\"), // e.g., vegetables, fruits, grains, livestock\n  contactPhone: text(\"contact_phone\").notNull(),\n  contactEmail: text(\"contact_email\").notNull(),\n  imageUrl: text(\"image_url\"),\n  password: text(\"password\").notNull(), // for vendor to delete their listing\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertListingSchema = createInsertSchema(listings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  contactEmail: z.string().email(\"Invalid email address\"),\n  contactPhone: z.string().min(10, \"Phone number must be at least 10 digits\"),\n  price: z.string().regex(/^\\d+(\\.\\d{1,2})?$/, \"Invalid price format\"),\n  password: z.string().min(4, \"Password must be at least 4 characters\"),\n});\n\nexport type InsertListing = z.infer<typeof insertListingSchema>;\nexport type Listing = typeof listings.$inferSelect;\n\n// Crop Info - educational content about crops/food items\nexport const cropInfo = pgTable(\"crop_info\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  body: text(\"body\").notNull(),\n  mediaUrl: text(\"media_url\"),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertCropInfoSchema = createInsertSchema(cropInfo).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertCropInfo = z.infer<typeof insertCropInfoSchema>;\nexport type CropInfo = typeof cropInfo.$inferSelect;\n\n// Questions - Q&A section for learning about Orient\nexport const questions = pgTable(\"questions\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  body: text(\"body\").notNull(),\n  authorName: text(\"author_name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertQuestionSchema = createInsertSchema(questions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertQuestion = z.infer<typeof insertQuestionSchema>;\nexport type Question = typeof questions.$inferSelect;\n\n// Answers - responses to questions\nexport const answers = pgTable(\"answers\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  questionId: varchar(\"question_id\").notNull(),\n  body: text(\"body\").notNull(),\n  authorName: text(\"author_name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertAnswerSchema = createInsertSchema(answers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAnswer = z.infer<typeof insertAnswerSchema>;\nexport type Answer = typeof answers.$inferSelect;\n","size_bytes":3286},"client/src/App.tsx":{"content":"import { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Route, Switch } from \"wouter\";\nimport RoleSelection from \"./pages/RoleSelection\";\nimport VendorPostListing from \"./pages/VendorPostListing\";\nimport VendorBrowse from \"./pages/VendorBrowse\";\nimport BuyerBrowse from \"./pages/BuyerBrowse\";\nimport CropInfo from \"./pages/CropInfo\";\nimport ListingDetail from \"./pages/ListingDetail\";\nimport QuestionsPage from \"./pages/QuestionsPage\";\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Switch>\n        <Route path=\"/\" component={RoleSelection} />\n        <Route path=\"/vendor/browse\" component={VendorBrowse} />\n        <Route path=\"/vendor/post\" component={VendorPostListing} />\n        <Route path=\"/buyer/browse\" component={BuyerBrowse} />\n        <Route path=\"/crop-info\" component={CropInfo} />\n        <Route path=\"/questions\" component={QuestionsPage} />\n        <Route path=\"/listing/:id\" component={ListingDetail} />\n        <Route>404 Page Not Found</Route>\n      </Switch>\n      <Toaster />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1204},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(48, 60%, 97%); /* Ivory White #F9F7F3 */\n  --foreground: hsl(208, 19%, 22%); /* Charcoal #2F3A45 */\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(208, 19%, 22%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(208, 19%, 22%);\n  --primary: hsl(198, 100%, 29%); /* Sea Blue #006994 */\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(16, 100%, 66%); /* Coral #FF7F50 */\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(213, 15%, 71%); /* Cool Gray #A9B3C1 */\n  --muted-foreground: hsl(208, 19%, 22%);\n  --accent: hsl(45, 88%, 63%); /* Golden Yellow #F2C14E */\n  --accent-foreground: hsl(208, 19%, 22%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(213, 15%, 85%);\n  --input: hsl(213, 15%, 85%);\n  --ring: hsl(198, 100%, 29%);\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(208, 19%, 15%);\n  --foreground: hsl(48, 60%, 97%);\n  --card: hsl(208, 19%, 20%);\n  --card-foreground: hsl(48, 60%, 97%);\n  --popover: hsl(208, 19%, 15%);\n  --popover-foreground: hsl(48, 60%, 97%);\n  --primary: hsl(198, 100%, 40%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(16, 100%, 66%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(213, 15%, 30%);\n  --muted-foreground: hsl(213, 15%, 71%);\n  --accent: hsl(45, 88%, 63%);\n  --accent-foreground: hsl(208, 19%, 15%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(213, 15%, 25%);\n  --input: hsl(213, 15%, 25%);\n  --ring: hsl(198, 100%, 40%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.hero-gradient {\n  background: linear-gradient(\n    135deg,\n    hsl(198, 100%, 29%) 0%,\n    hsl(198, 100%, 40%) 100%\n  );\n}\n\n.card-hover {\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n}\n","size_bytes":2098},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nif (\n  \"serviceWorker\" in navigator &&\n  (window.location.protocol === \"https:\" || window.location.hostname === \"localhost\")\n) {\n  window.addEventListener(\"load\", () => {\n    navigator.serviceWorker\n      .register(\"/service-worker.js\")\n      .then((registration) => {\n        console.log(\"✅ PWA: Service Worker registered successfully\");\n      })\n      .catch((error) => {\n        console.error(\"❌ PWA: Service Worker registration failed:\", error);\n      });\n  });\n}\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":630},"client/src/components/Footer.tsx":{"content":"export default function Footer() {\n  return (\n    <footer className=\"bg-card border-t border-border mt-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div>\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <svg\n                  className=\"w-5 h-5 text-primary-foreground\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\n                  />\n                </svg>\n              </div>\n              <span className=\"text-lg font-bold text-primary\">Orient</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Your trusted marketplace connecting quality vendors with customers worldwide.\n            </p>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <a href=\"/\" className=\"text-sm text-muted-foreground hover:text-foreground transition\">\n                  Browse Products\n                </a>\n              </li>\n              <li>\n                <a href=\"/\" className=\"text-sm text-muted-foreground hover:text-foreground transition\">\n                  Find Vendors\n                </a>\n              </li>\n              <li>\n                <a href=\"/\" className=\"text-sm text-muted-foreground hover:text-foreground transition\">\n                  About Us\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\">For Vendors</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <a\n                  href=\"/api/login\"\n                  className=\"text-sm text-muted-foreground hover:text-foreground transition\"\n                >\n                  Register Your Store\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"/api/login\"\n                  className=\"text-sm text-muted-foreground hover:text-foreground transition\"\n                >\n                  Vendor Login\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h4 className=\"font-semibold mb-4\">Support</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <a href=\"#\" className=\"text-sm text-muted-foreground hover:text-foreground transition\">\n                  Help Center\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-sm text-muted-foreground hover:text-foreground transition\">\n                  Contact Us\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-sm text-muted-foreground hover:text-foreground transition\">\n                  Privacy Policy\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border pt-8 text-center\">\n          <p className=\"text-sm text-muted-foreground\">© 2024 Orient Marketplace. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3682},"client/src/components/Navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Home, Store, LayoutDashboard, Shield, Heart, Download, Smartphone, Share2 } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\nimport { usePWAInstall } from \"@/hooks/usePWAInstall\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport default function Navbar() {\n  const [location, navigate] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [installDialogOpen, setInstallDialogOpen] = useState(false);\n  const { isInstallable, isIOS, isAndroid, isInstalled, installApp, shareApp } = usePWAInstall();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const search = params.get(\"search\") || \"\";\n    setSearchQuery(search);\n  }, [location]);\n\n  const handleSearchKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      const params = new URLSearchParams(window.location.search);\n      if (searchQuery) {\n        params.set(\"search\", searchQuery);\n      } else {\n        params.delete(\"search\");\n      }\n      navigate(`/?${params.toString()}`);\n    }\n  };\n\n  const handleInstallAndroid = async () => {\n    const installed = await installApp();\n    if (installed) {\n      setInstallDialogOpen(false);\n    }\n  };\n\n  const handleInstallIOS = () => {\n    setInstallDialogOpen(false);\n  };\n\n  const handleShare = async () => {\n    const result = await shareApp();\n    if (result.success) {\n      setInstallDialogOpen(false);\n      if (result.method === 'clipboard') {\n        toast({\n          title: \"Link copied!\",\n          description: \"The app link has been copied to your clipboard.\",\n        });\n      } else {\n        toast({\n          title: \"Shared successfully!\",\n          description: \"Thanks for sharing Orient!\",\n        });\n      }\n    } else if (!result.cancelled) {\n      toast({\n        title: \"Unable to share\",\n        description: \"Please copy the URL from your browser and share it manually.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <nav className=\"sticky top-0 z-50 bg-card border-b border-border shadow-sm\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-home\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <Home className=\"w-6 h-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-primary\">Orient</h1>\n              <p className=\"text-xs text-muted-foreground\">Vendor Marketplace</p>\n            </div>\n          </Link>\n\n          <div className=\"flex items-center space-x-2 md:space-x-4 ml-auto\">\n            {isAuthenticated && (\n              <>\n                <Link href=\"/wishlist\">\n                  <Button\n                    variant=\"ghost\"\n                    className=\"hidden md:flex items-center space-x-2\"\n                    data-testid=\"link-wishlist\"\n                  >\n                    <Heart className=\"w-5 h-5\" />\n                    <span>Wishlist</span>\n                  </Button>\n                </Link>\n                {user?.role === \"vendor\" && (\n                  <Link href=\"/vendor-dashboard\">\n                    <Button\n                      variant=\"ghost\"\n                      className=\"hidden md:flex items-center space-x-2\"\n                      data-testid=\"link-vendor-dashboard\"\n                    >\n                      <Store className=\"w-5 h-5\" />\n                      <span>Dashboard</span>\n                    </Button>\n                  </Link>\n                )}\n                {user?.role === \"admin\" && (\n                  <Link href=\"/admin-dashboard\">\n                    <Button\n                      variant=\"ghost\"\n                      className=\"hidden md:flex items-center space-x-2\"\n                      data-testid=\"link-admin-dashboard\"\n                    >\n                      <Shield className=\"w-5 h-5\" />\n                      <span>Admin</span>\n                    </Button>\n                  </Link>\n                )}\n                <Button\n                  onClick={() => (window.location.href = \"/api/logout\")}\n                  variant=\"ghost\"\n                  className=\"hidden md:flex\"\n                  data-testid=\"button-logout\"\n                >\n                  Logout\n                </Button>\n              </>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setInstallDialogOpen(true)}\n              className=\"flex items-center space-x-1\"\n              data-testid={isInstalled ? \"button-share-app\" : \"button-download-app\"}\n            >\n              {isInstalled ? (\n                <>\n                  <Share2 className=\"w-4 h-4\" />\n                  <span className=\"hidden sm:inline\">Share</span>\n                </>\n              ) : (\n                <>\n                  <Download className=\"w-4 h-4\" />\n                  <span className=\"hidden sm:inline\">Download</span>\n                </>\n              )}\n            </Button>\n            {isAuthenticated && (\n              <button\n                className=\"md:hidden p-2 hover:bg-muted rounded-lg\"\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                data-testid=\"button-mobile-menu\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth=\"2\"\n                    d=\"M4 6h16M4 12h16M4 18h16\"\n                  />\n                </svg>\n              </button>\n            )}\n          </div>\n        </div>\n\n        {mobileMenuOpen && isAuthenticated && (\n          <div className=\"md:hidden border-t border-border py-4 space-y-2\">\n            {user?.role === \"vendor\" && (\n              <Link href=\"/vendor-dashboard\">\n                <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"link-vendor-dashboard-mobile\">\n                  <Store className=\"w-5 h-5 mr-2\" />\n                  Dashboard\n                </Button>\n              </Link>\n            )}\n            {user?.role === \"admin\" && (\n              <Link href=\"/admin-dashboard\">\n                <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"link-admin-dashboard-mobile\">\n                  <Shield className=\"w-5 h-5 mr-2\" />\n                  Admin\n                </Button>\n              </Link>\n            )}\n            <Button\n              onClick={() => (window.location.href = \"/api/logout\")}\n              variant=\"ghost\"\n              className=\"w-full justify-start\"\n              data-testid=\"button-logout-mobile\"\n            >\n              Logout\n            </Button>\n          </div>\n        )}\n      </div>\n\n      <Dialog open={installDialogOpen} onOpenChange={setInstallDialogOpen}>\n        <DialogContent className=\"sm:max-w-md\" style={{ backgroundColor: '#F5F5DC', opacity: 1 }}>\n          {isInstalled ? (\n            <>\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center space-x-2\">\n                  <Share2 className=\"w-5 h-5\" />\n                  <span>Share Orient App</span>\n                </DialogTitle>\n                <DialogDescription>\n                  Share Orient with friends and family so they can discover great local vendors!\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-3 pt-4\">\n                <Button\n                  onClick={handleShare}\n                  className=\"w-full flex items-center justify-center space-x-2 h-14\"\n                  variant=\"default\"\n                  data-testid=\"button-share-link\"\n                >\n                  <Share2 className=\"w-5 h-5\" />\n                  <div className=\"flex flex-col items-start\">\n                    <span className=\"font-semibold\">Share App Link</span>\n                    <span className=\"text-xs opacity-90\">\n                      Send link via messages, email, or social media\n                    </span>\n                  </div>\n                </Button>\n              </div>\n              <div className=\"mt-4 p-3 bg-muted rounded-lg text-sm\">\n                <p className=\"text-muted-foreground\">\n                  When others open the link, they'll be able to browse Orient and install it on their devices too!\n                </p>\n              </div>\n            </>\n          ) : (\n            <>\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center space-x-2\">\n                  <Download className=\"w-5 h-5\" />\n                  <span>Download Orient App</span>\n                </DialogTitle>\n                <DialogDescription>\n                  Choose your device type to install Orient as an app on your phone\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-3 pt-4\">\n                <Button\n                  onClick={handleInstallAndroid}\n                  className=\"w-full flex items-center justify-center space-x-2 h-14\"\n                  variant=\"default\"\n                  disabled={!isInstallable && isAndroid}\n                  data-testid=\"button-install-android\"\n                >\n                  <Smartphone className=\"w-5 h-5\" />\n                  <div className=\"flex flex-col items-start\">\n                    <span className=\"font-semibold\">Android</span>\n                    <span className=\"text-xs opacity-90\">\n                      {isInstallable ? \"Install now\" : \"Use Chrome browser to install\"}\n                    </span>\n                  </div>\n                </Button>\n                <Button\n                  onClick={handleInstallIOS}\n                  className=\"w-full flex items-center justify-center space-x-2 h-14\"\n                  variant=\"default\"\n                  data-testid=\"button-install-ios\"\n                >\n                  <Smartphone className=\"w-5 h-5\" />\n                  <div className=\"flex flex-col items-start\">\n                    <span className=\"font-semibold\">iOS (iPhone/iPad)</span>\n                    <span className=\"text-xs opacity-90\">\n                      Tap Share → Add to Home Screen\n                    </span>\n                  </div>\n                </Button>\n              </div>\n              {isIOS && (\n                <div className=\"mt-4 p-3 bg-muted rounded-lg text-sm\">\n                  <p className=\"font-semibold mb-1\">iOS Installation Steps:</p>\n                  <ol className=\"list-decimal list-inside space-y-1 text-muted-foreground\">\n                    <li>Tap the Share button (square with arrow)</li>\n                    <li>Scroll down and tap \"Add to Home Screen\"</li>\n                    <li>Tap \"Add\" in the top right corner</li>\n                  </ol>\n                </div>\n              )}\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </nav>\n  );\n}\n","size_bytes":11543},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName} type=\"button\">\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2796},"client/src/components/ProductCard.tsx":{"content":"import { Link } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Heart } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Product, Vendor } from \"@shared/schema\";\n\ninterface ProductCardProps {\n  product: Product & { vendor?: Vendor };\n}\n\nexport default function ProductCard({ product }: ProductCardProps) {\n  const { user } = useAuth();\n\n  const { data: wishlistStatus } = useQuery<{ isInWishlist: boolean }>({\n    queryKey: [\"/api/wishlist/check\", product.id],\n    queryFn: async ({ queryKey }) => {\n      const [path, productId] = queryKey;\n      const res = await fetch(`${path}/${productId}`, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to check wishlist\");\n      return res.json();\n    },\n    enabled: !!user,\n  });\n\n  const toggleWishlistMutation = useMutation({\n    mutationFn: async () => {\n      if (wishlistStatus?.isInWishlist) {\n        return await apiRequest(\"DELETE\", `/api/wishlist/${product.id}`, {});\n      } else {\n        return await apiRequest(\"POST\", \"/api/wishlist\", { productId: product.id });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist/check\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n    },\n  });\n\n  const handleWishlistClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (user) {\n      toggleWishlistMutation.mutate();\n    }\n  };\n\n  return (\n    <Link href={`/products/${product.id}`}>\n      <div className=\"card-hover bg-card rounded-xl shadow-md overflow-hidden border border-border cursor-pointer relative\" data-testid={`card-product-${product.id}`}>\n        {user && (\n          <button\n            onClick={handleWishlistClick}\n            className=\"absolute top-3 right-3 z-10 p-2 bg-background/80 rounded-full hover:bg-background transition-colors\"\n            data-testid={`button-wishlist-${product.id}`}\n          >\n            <Heart\n              className={`w-5 h-5 ${\n                wishlistStatus?.isInWishlist\n                  ? \"fill-red-500 text-red-500\"\n                  : \"text-muted-foreground\"\n              }`}\n            />\n          </button>\n        )}\n        {product.imageUrl ? (\n          <img\n            src={product.imageUrl}\n            alt={product.name}\n            className=\"w-full h-48 object-cover\"\n            data-testid={`img-product-${product.id}`}\n          />\n        ) : (\n          <div className=\"w-full h-48 bg-muted flex items-center justify-center\">\n            <svg\n              className=\"w-16 h-16 text-muted-foreground\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n              />\n            </svg>\n          </div>\n        )}\n        <div className=\"p-4\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <h4 className=\"font-semibold text-lg line-clamp-1\" data-testid={`text-product-name-${product.id}`}>\n              {product.name}\n            </h4>\n            {product.status === \"active\" && (\n              <span className=\"text-xs bg-accent text-accent-foreground px-2 py-1 rounded-full\">\n                Active\n              </span>\n            )}\n          </div>\n          <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\" data-testid={`text-product-description-${product.id}`}>\n            {product.description || \"No description available\"}\n          </p>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-xl font-bold text-primary\" data-testid={`text-product-price-${product.id}`}>\n              ${product.price}\n            </span>\n            {product.vendor && (\n              <Link href={`/vendors/${product.vendor.id}`}>\n                <button className=\"text-sm text-muted-foreground hover:text-foreground flex items-center space-x-1\" data-testid={`link-vendor-${product.vendor.id}`}>\n                  <span>by {product.vendor.storeName}</span>\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"2\"\n                      d=\"M9 5l7 7-7 7\"\n                    />\n                  </svg>\n                </button>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":4881},"client/src/components/VendorCard.tsx":{"content":"import { Link } from \"wouter\";\nimport type { Vendor } from \"@shared/schema\";\n\ninterface VendorCardProps {\n  vendor: Vendor;\n  productCount?: number;\n}\n\nexport default function VendorCard({ vendor, productCount = 0 }: VendorCardProps) {\n  const initials = vendor.storeName\n    .split(\" \")\n    .map((n) => n[0])\n    .join(\"\")\n    .toUpperCase()\n    .slice(0, 2);\n\n  return (\n    <Link href={`/vendors/${vendor.id}`}>\n      <div className=\"card-hover bg-card rounded-xl shadow-md overflow-hidden border border-border cursor-pointer\" data-testid={`card-vendor-${vendor.id}`}>\n        <div className=\"p-6\">\n          <div className=\"flex items-start space-x-4 mb-4\">\n            {vendor.logoUrl ? (\n              <img\n                src={vendor.logoUrl}\n                alt={vendor.storeName}\n                className=\"w-16 h-16 rounded-lg object-cover\"\n                data-testid={`img-vendor-logo-${vendor.id}`}\n              />\n            ) : (\n              <div className=\"w-16 h-16 bg-primary rounded-lg flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-2xl font-bold text-primary-foreground\">{initials}</span>\n              </div>\n            )}\n            <div className=\"flex-1\">\n              <h4 className=\"font-bold text-lg mb-1\" data-testid={`text-vendor-name-${vendor.id}`}>\n                {vendor.storeName}\n              </h4>\n              <p className=\"text-sm text-muted-foreground mb-2 line-clamp-1\">\n                {vendor.description || \"No description\"}\n              </p>\n            </div>\n          </div>\n          <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n            {vendor.description || \"Welcome to our store! Browse our quality products.\"}\n          </p>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\" data-testid={`text-product-count-${vendor.id}`}>\n              {productCount} Products\n            </span>\n            <button className=\"text-sm font-semibold text-primary hover:underline\" data-testid={`button-view-store-${vendor.id}`}>\n              View Store →\n            </button>\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":2224},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user: user ?? undefined,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":431},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Vendor, Product } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    } else if (!isLoading && user?.role !== \"admin\") {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have admin privileges\",\n        variant: \"destructive\",\n      });\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: vendors = [] } = useQuery<Vendor[]>({\n    queryKey: [\"/api/vendors\"],\n    enabled: user?.role === \"admin\",\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\"],\n    enabled: user?.role === \"admin\",\n  });\n\n  const pendingVendors = vendors.filter((v) => v.status === \"pending\");\n  const flaggedProducts = products.filter((p) => p.status === \"flagged\");\n\n  const approveVendorMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"PATCH\", `/api/vendors/${id}/status`, {\n        status: \"approved\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vendors\"] });\n      toast({ title: \"Success\", description: \"Vendor approved\" });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const rejectVendorMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"PATCH\", `/api/vendors/${id}/status`, {\n        status: \"rejected\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/vendors\"] });\n      toast({ title: \"Success\", description: \"Vendor rejected\" });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const removeProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/products/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Success\", description: \"Product removed\" });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (user?.role !== \"admin\") {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold mb-2\">Access Denied</h2>\n            <p className=\"text-muted-foreground\">You don't have admin privileges</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n\n      <section className=\"py-16 bg-background flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-3xl font-bold mb-2\">Admin Dashboard</h2>\n            <p className=\"text-muted-foreground\">Manage vendors and moderate content</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <div className=\"bg-card rounded-xl shadow-md border border-border p-6\">\n              <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"text-total-vendors\">\n                {vendors.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Vendors</div>\n            </div>\n            <div className=\"bg-card rounded-xl shadow-md border border-border p-6\">\n              <div className=\"text-3xl font-bold text-amber-600 mb-1\" data-testid=\"text-pending-vendors\">\n                {pendingVendors.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Pending Approval</div>\n            </div>\n            <div className=\"bg-card rounded-xl shadow-md border border-border p-6\">\n              <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"text-total-products\">\n                {products.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Products</div>\n            </div>\n            <div className=\"bg-card rounded-xl shadow-md border border-border p-6\">\n              <div className=\"text-3xl font-bold text-destructive mb-1\" data-testid=\"text-flagged-products\">\n                {flaggedProducts.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Flagged Items</div>\n            </div>\n          </div>\n\n          {pendingVendors.length > 0 && (\n            <div className=\"bg-card rounded-xl shadow-md border border-border overflow-hidden mb-8\">\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"font-semibold text-lg\">Pending Vendor Approvals</h3>\n              </div>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Vendor\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Email\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Status\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-card divide-y divide-border\">\n                    {pendingVendors.map((vendor) => (\n                      <tr key={vendor.id} className=\"hover:bg-muted/50\" data-testid={`row-vendor-${vendor.id}`}>\n                        <td className=\"px-6 py-4\">\n                          <div className=\"font-medium\">{vendor.storeName}</div>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <span className=\"text-sm text-muted-foreground\">{vendor.email}</span>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <span className=\"px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-amber-100 text-amber-800\">\n                            {vendor.status}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            onClick={() => approveVendorMutation.mutate(vendor.id)}\n                            data-testid={`button-approve-${vendor.id}`}\n                          >\n                            Approve\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => rejectVendorMutation.mutate(vendor.id)}\n                            data-testid={`button-reject-${vendor.id}`}\n                          >\n                            Reject\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {flaggedProducts.length > 0 && (\n            <div className=\"bg-card rounded-xl shadow-md border border-border overflow-hidden\">\n              <div className=\"p-6 border-b border-border\">\n                <h3 className=\"font-semibold text-lg\">Flagged Content</h3>\n              </div>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Item\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Reason\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-card divide-y divide-border\">\n                    {flaggedProducts.map((product) => (\n                      <tr key={product.id} className=\"hover:bg-muted/50\" data-testid={`row-flagged-${product.id}`}>\n                        <td className=\"px-6 py-4\">\n                          <div className=\"font-medium\">{product.name}</div>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <span className=\"px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-destructive/10 text-destructive\">\n                            {product.flagReason || \"Flagged\"}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            onClick={() => {\n                              if (confirm(\"Are you sure you want to remove this product?\")) {\n                                removeProductMutation.mutate(product.id);\n                              }\n                            }}\n                            data-testid={`button-remove-${product.id}`}\n                          >\n                            Remove\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12351},"client/src/pages/Home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport ProductCard from \"@/components/ProductCard\";\nimport VendorCard from \"@/components/VendorCard\";\nimport type { Product, Vendor, Category } from \"@shared/schema\";\n\nexport default function Home() {\n  const [location] = useLocation();\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const search = params.get(\"search\") || \"\";\n    setSearchQuery(search);\n  }, [location]);\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  const { data: products = [], isLoading: productsLoading } = useQuery<(Product & { vendor?: Vendor })[]>({\n    queryKey: [\"/api/products\", selectedCategory, searchQuery],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedCategory) params.append(\"categoryId\", selectedCategory);\n      if (searchQuery) params.append(\"search\", searchQuery);\n      params.append(\"status\", \"active\");\n      const res = await fetch(`/api/products?${params}`);\n      if (!res.ok) throw new Error(\"Failed to fetch products\");\n      return res.json();\n    },\n  });\n\n  const { data: vendors = [] } = useQuery<Vendor[]>({\n    queryKey: [\"/api/vendors\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/vendors?status=approved\");\n      if (!res.ok) throw new Error(\"Failed to fetch vendors\");\n      return res.json();\n    },\n  });\n\n  const featuredVendors = vendors.slice(0, 3);\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n\n      <section className=\"hero-gradient text-primary-foreground py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">Discover Quality Vendors</h2>\n            <p className=\"text-lg md:text-xl text-primary-foreground/90 mb-8 max-w-2xl mx-auto\">\n              Connect directly with trusted vendors and explore thousands of quality products\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"bg-secondary/30 border-y border-border py-4\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center space-x-3 overflow-x-auto pb-2\">\n            <span className=\"text-sm font-medium text-muted-foreground whitespace-nowrap\">Categories:</span>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => setSelectedCategory(\"\")}\n                className={`category-chip px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${\n                  !selectedCategory\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-card border border-border\"\n                }`}\n                data-testid=\"button-category-all\"\n              >\n                All Products\n              </button>\n              {categories.map((category) => (\n                <button\n                  key={category.id}\n                  onClick={() => setSelectedCategory(category.id)}\n                  className={`category-chip px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${\n                    selectedCategory === category.id\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"bg-card border border-border\"\n                  }`}\n                  data-testid={`button-category-${category.slug}`}\n                >\n                  {category.name}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-12 bg-background flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h3 className=\"text-2xl font-bold\">Featured Products</h3>\n          </div>\n\n          {productsLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"bg-card rounded-xl border border-border p-4 animate-pulse\">\n                  <div className=\"w-full h-48 bg-muted rounded-lg mb-4\" />\n                  <div className=\"h-4 bg-muted rounded mb-2\" />\n                  <div className=\"h-4 bg-muted rounded w-2/3\" />\n                </div>\n              ))}\n            </div>\n          ) : products.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No products found</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {products.map((product) => (\n                <ProductCard key={product.id} product={product} />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {featuredVendors.length > 0 && (\n        <section className=\"py-16 bg-secondary/20\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-12\">\n              <h3 className=\"text-3xl font-bold mb-3\">Featured Vendors</h3>\n              <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n                Explore our trusted vendor community and find quality products from verified sellers\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {featuredVendors.map((vendor) => (\n                <VendorCard key={vendor.id} vendor={vendor} />\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6022},"client/src/pages/ProductDetail.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { useEffect } from \"react\";\nimport Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Phone, Mail, ArrowLeft } from \"lucide-react\";\nimport type { Product, Vendor } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function ProductDetail() {\n  const [, params] = useRoute(\"/products/:id\");\n  const productId = params?.id;\n\n  const { data: product, isLoading: productLoading } = useQuery<Product>({\n    queryKey: [\"/api/products\", productId],\n    enabled: !!productId,\n  });\n\n  useEffect(() => {\n    if (productId) {\n      apiRequest(\"POST\", \"/api/analytics/product-view\", { productId }).catch(console.error);\n    }\n  }, [productId]);\n\n  const { data: vendor, isLoading: vendorLoading } = useQuery<Vendor>({\n    queryKey: [\"/api/vendors\", product?.vendorId],\n    enabled: !!product?.vendorId,\n  });\n\n  if (productLoading || vendorLoading) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading product...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold mb-2\">Product not found</h2>\n            <p className=\"text-muted-foreground\">The product you're looking for doesn't exist</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const trackContact = async (contactType: string) => {\n    if (!vendor?.id) return;\n    try {\n      await apiRequest(\"POST\", \"/api/analytics/contact-click\", {\n        vendorId: vendor.id,\n        contactType,\n      });\n    } catch (error) {\n      console.error(\"Error tracking contact:\", error);\n    }\n  };\n\n  const handleCall = () => {\n    if (vendor?.phone) {\n      trackContact(\"phone\");\n      window.location.href = `tel:${vendor.phone}`;\n    }\n  };\n\n  const handleWhatsApp = () => {\n    if (vendor?.whatsapp) {\n      trackContact(\"whatsapp\");\n      window.open(`https://wa.me/${vendor.whatsapp.replace(/\\D/g, \"\")}`, \"_blank\");\n    }\n  };\n\n  const handleEmail = () => {\n    if (vendor?.email) {\n      trackContact(\"email\");\n      window.location.href = `mailto:${vendor.email}`;\n    }\n  };\n\n  const vendorInitials = vendor?.storeName\n    .split(\" \")\n    .map((n) => n[0])\n    .join(\"\")\n    .toUpperCase()\n    .slice(0, 2);\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n\n      <section className=\"py-16 bg-background flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"mb-4\" data-testid=\"button-back\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Products\n            </Button>\n          </Link>\n\n          <div className=\"bg-card rounded-xl shadow-lg border border-border overflow-hidden\">\n            <div className=\"grid md:grid-cols-2 gap-8 p-6 md:p-8\">\n              <div>\n                {product.imageUrl ? (\n                  <img\n                    src={product.imageUrl}\n                    alt={product.name}\n                    className=\"w-full rounded-xl\"\n                    data-testid=\"img-product\"\n                  />\n                ) : (\n                  <div className=\"w-full aspect-square bg-muted rounded-xl flex items-center justify-center\">\n                    <svg\n                      className=\"w-24 h-24 text-muted-foreground\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth=\"2\"\n                        d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n                      />\n                    </svg>\n                  </div>\n                )}\n              </div>\n\n              <div>\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"text-product-name\">\n                      {product.name}\n                    </h2>\n                  </div>\n                  {product.status === \"active\" && (\n                    <span className=\"px-3 py-1 bg-accent text-accent-foreground text-sm font-semibold rounded-full\">\n                      Active\n                    </span>\n                  )}\n                </div>\n\n                <div className=\"mb-6\">\n                  <div className=\"text-4xl font-bold text-primary mb-2\" data-testid=\"text-product-price\">\n                    ${product.price}\n                  </div>\n                </div>\n\n                <div className=\"mb-6\">\n                  <h3 className=\"font-semibold mb-3\">Description</h3>\n                  <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-product-description\">\n                    {product.description || \"No description available\"}\n                  </p>\n                </div>\n\n                {vendor && (\n                  <div className=\"border-t border-border pt-6\">\n                    <p className=\"text-sm text-muted-foreground mb-3\">Sold by:</p>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        {vendor.logoUrl ? (\n                          <img\n                            src={vendor.logoUrl}\n                            alt={vendor.storeName}\n                            className=\"w-12 h-12 rounded-lg object-cover\"\n                            data-testid=\"img-vendor-logo\"\n                          />\n                        ) : (\n                          <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                            <span className=\"text-lg font-bold text-primary-foreground\">\n                              {vendorInitials}\n                            </span>\n                          </div>\n                        )}\n                        <div>\n                          <h4 className=\"font-semibold\" data-testid=\"text-vendor-name\">{vendor.storeName}</h4>\n                        </div>\n                      </div>\n                      <Link href={`/vendors/${vendor.id}`}>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-store\">\n                          View Store\n                        </Button>\n                      </Link>\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-3\">\n                      {vendor.phone && (\n                        <Button onClick={handleCall} className=\"contact-btn flex-1\" data-testid=\"button-call\">\n                          <Phone className=\"w-5 h-5 mr-2\" />\n                          Call Vendor\n                        </Button>\n                      )}\n                      {vendor.whatsapp && (\n                        <Button\n                          onClick={handleWhatsApp}\n                          className=\"contact-btn flex-1 bg-[#25D366] hover:bg-[#25D366]/90\"\n                          data-testid=\"button-whatsapp\"\n                        >\n                          <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z\" />\n                          </svg>\n                          WhatsApp\n                        </Button>\n                      )}\n                      {vendor.email && (\n                        <Button onClick={handleEmail} variant=\"secondary\" className=\"contact-btn flex-1\" data-testid=\"button-email\">\n                          <Mail className=\"w-5 h-5 mr-2\" />\n                          Email\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9776},"client/src/pages/VendorDashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport type { UploadResult } from \"@uppy/core\";\nimport type { Vendor, Product } from \"@shared/schema\";\nimport { Plus, Edit, Trash2, TrendingUp } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function VendorDashboard() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [showProductForm, setShowProductForm] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: vendor } = useQuery<Vendor | null>({\n    queryKey: [\"/api/vendors/me\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/vendors/me\");\n      if (res.status === 404) return null;\n      if (!res.ok) throw new Error(\"Failed to fetch vendor\");\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products\", vendor?.id],\n    queryFn: async () => {\n      if (!vendor?.id) return [];\n      const res = await fetch(`/api/products?vendorId=${vendor.id}`);\n      if (!res.ok) throw new Error(\"Failed to fetch products\");\n      return res.json();\n    },\n    enabled: !!vendor?.id,\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/products\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Success\", description: \"Product created successfully\" });\n      setShowProductForm(false);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PATCH\", `/api/products/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Success\", description: \"Product updated successfully\" });\n      setEditingProduct(null);\n      setShowProductForm(false);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/products/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({ title: \"Success\", description: \"Product deleted successfully\" });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitProduct = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data = {\n      name: formData.get(\"name\"),\n      description: formData.get(\"description\"),\n      price: formData.get(\"price\"),\n      categoryId: formData.get(\"categoryId\") || null,\n    };\n\n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, data });\n    } else {\n      createProductMutation.mutate(data);\n    }\n  };\n\n  const handleGetUploadParameters = async () => {\n    const res = await fetch(\"/api/objects/upload\", {\n      method: \"POST\",\n      credentials: \"include\",\n    });\n    const { uploadURL } = await res.json();\n    return {\n      method: \"PUT\" as const,\n      url: uploadURL,\n    };\n  };\n\n  const handleUploadComplete = async (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => {\n    if (result.successful.length > 0 && editingProduct) {\n      const uploadURL = result.successful[0].uploadURL;\n      try {\n        await apiRequest(\"PUT\", \"/api/product-image\", {\n          imageUrl: uploadURL,\n          productId: editingProduct.id,\n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n        toast({ title: \"Success\", description: \"Product image uploaded\" });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to save product image\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!vendor) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center max-w-md\">\n            <h2 className=\"text-2xl font-bold mb-4\">No Vendor Account</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              You need to create a vendor account to access the dashboard.\n            </p>\n            <Button onClick={() => setLocation(\"/\")}>Go to Homepage</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n\n      <section className=\"py-16 bg-background flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"mb-8 flex justify-between items-start\">\n            <div>\n              <h2 className=\"text-3xl font-bold mb-2\">Vendor Dashboard</h2>\n              <p className=\"text-muted-foreground\">Manage your store and products</p>\n            </div>\n            {vendor && (\n              <Link href=\"/vendor-analytics\">\n                <Button variant=\"outline\" data-testid=\"button-view-analytics\">\n                  <TrendingUp className=\"w-4 h-4 mr-2\" />\n                  View Analytics\n                </Button>\n              </Link>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <div className=\"bg-card rounded-xl shadow-md border border-border p-6\">\n              <div className=\"text-3xl font-bold mb-1\" data-testid=\"text-product-count\">{products.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Products</div>\n            </div>\n            <div className=\"bg-card rounded-xl shadow-md border border-border p-6\">\n              <div className=\"text-3xl font-bold mb-1\">\n                {vendor.status === \"approved\" ? \"✓\" : \"⏳\"}\n              </div>\n              <div className=\"text-sm text-muted-foreground capitalize\">{vendor.status}</div>\n            </div>\n          </div>\n\n          <div className=\"bg-card rounded-xl shadow-md border border-border p-6 mb-8\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"font-semibold text-lg\">Quick Actions</h3>\n            </div>\n            <div className=\"flex gap-4\">\n              <Button onClick={() => setShowProductForm(true)} data-testid=\"button-add-product\">\n                <Plus className=\"w-5 h-5 mr-2\" />\n                Add New Product\n              </Button>\n            </div>\n          </div>\n\n          {showProductForm && (\n            <div className=\"bg-card rounded-xl shadow-md border border-border p-6 mb-8\">\n              <h3 className=\"font-semibold text-lg mb-4\">\n                {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n              </h3>\n              <form onSubmit={handleSubmitProduct} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Product Name</Label>\n                  <Input\n                    id=\"name\"\n                    name=\"name\"\n                    defaultValue={editingProduct?.name}\n                    required\n                    data-testid=\"input-product-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    name=\"description\"\n                    defaultValue={editingProduct?.description || \"\"}\n                    data-testid=\"input-product-description\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"price\">Price ($)</Label>\n                  <Input\n                    id=\"price\"\n                    name=\"price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    defaultValue={editingProduct?.price}\n                    required\n                    data-testid=\"input-product-price\"\n                  />\n                </div>\n                {editingProduct && (\n                  <div>\n                    <Label>Product Image</Label>\n                    <ObjectUploader\n                      maxNumberOfFiles={1}\n                      maxFileSize={10485760}\n                      onGetUploadParameters={handleGetUploadParameters}\n                      onComplete={handleUploadComplete}\n                      data-testid=\"uploader-product-image\"\n                    >\n                      <span>Upload Image</span>\n                    </ObjectUploader>\n                  </div>\n                )}\n                <div className=\"flex gap-2\">\n                  <Button type=\"submit\" data-testid=\"button-save-product\">\n                    {editingProduct ? \"Update\" : \"Create\"} Product\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setShowProductForm(false);\n                      setEditingProduct(null);\n                    }}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </div>\n          )}\n\n          <div className=\"bg-card rounded-xl shadow-md border border-border overflow-hidden\">\n            <div className=\"p-6 border-b border-border\">\n              <h3 className=\"font-semibold text-lg\">Your Products</h3>\n            </div>\n\n            {products.length === 0 ? (\n              <div className=\"p-12 text-center\">\n                <p className=\"text-muted-foreground\">No products yet. Add your first product!</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Product\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Price\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Status\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-card divide-y divide-border\">\n                    {products.map((product) => (\n                      <tr key={product.id} className=\"hover:bg-muted/50\" data-testid={`row-product-${product.id}`}>\n                        <td className=\"px-6 py-4\">\n                          <div className=\"flex items-center\">\n                            {product.imageUrl ? (\n                              <img\n                                src={product.imageUrl}\n                                alt={product.name}\n                                className=\"w-10 h-10 rounded-lg object-cover mr-3\"\n                              />\n                            ) : (\n                              <div className=\"w-10 h-10 bg-muted rounded-lg mr-3\" />\n                            )}\n                            <span className=\"font-medium\">{product.name}</span>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <span className=\"font-semibold\">${product.price}</span>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <span\n                            className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                              product.status === \"active\"\n                                ? \"bg-green-100 text-green-800\"\n                                : product.status === \"flagged\"\n                                ? \"bg-red-100 text-red-800\"\n                                : \"bg-amber-100 text-amber-800\"\n                            }`}\n                          >\n                            {product.status}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setEditingProduct(product);\n                                setShowProductForm(true);\n                              }}\n                              data-testid={`button-edit-${product.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => {\n                                if (confirm(\"Are you sure you want to delete this product?\")) {\n                                  deleteProductMutation.mutate(product.id);\n                                }\n                              }}\n                              data-testid={`button-delete-${product.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16743},"client/src/pages/VendorProfile.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { useState } from \"react\";\nimport Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport ProductCard from \"@/components/ProductCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Phone, Mail, Star } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Vendor, Product, Review } from \"@shared/schema\";\n\nexport default function VendorProfile() {\n  const [, params] = useRoute(\"/vendors/:id\");\n  const vendorId = params?.id;\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [showReviewForm, setShowReviewForm] = useState(false);\n  const [rating, setRating] = useState(5);\n  const [comment, setComment] = useState(\"\");\n\n  const { data: vendor, isLoading: vendorLoading } = useQuery<Vendor>({\n    queryKey: [\"/api/vendors\", vendorId],\n    enabled: !!vendorId,\n  });\n\n  const { data: products = [], isLoading: productsLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products\", vendorId],\n    queryFn: async () => {\n      const res = await fetch(`/api/products?vendorId=${vendorId}&status=active`);\n      if (!res.ok) throw new Error(\"Failed to fetch products\");\n      return res.json();\n    },\n    enabled: !!vendorId,\n  });\n\n  const { data: reviews = [] } = useQuery<(Review & { userName: string })[]>({\n    queryKey: [\"/api/reviews/vendor\", vendorId],\n    queryFn: async () => {\n      const res = await fetch(`/api/reviews/vendor/${vendorId}`);\n      if (!res.ok) throw new Error(\"Failed to fetch reviews\");\n      return res.json();\n    },\n    enabled: !!vendorId,\n  });\n\n  const { data: averageRating = 0 } = useQuery<number>({\n    queryKey: [\"/api/reviews/vendor\", vendorId, \"average\"],\n    queryFn: async () => {\n      const res = await fetch(`/api/reviews/vendor/${vendorId}/average`);\n      if (!res.ok) throw new Error(\"Failed to fetch average rating\");\n      const data = await res.json();\n      return data.average;\n    },\n    enabled: !!vendorId,\n  });\n\n  const createReviewMutation = useMutation({\n    mutationFn: async (data: { vendorId: string; rating: string; comment: string }) => {\n      return await apiRequest(\"POST\", \"/api/reviews\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews/vendor\", vendorId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews/vendor\", vendorId, \"average\"] });\n      toast({ title: \"Success\", description: \"Review submitted successfully\" });\n      setShowReviewForm(false);\n      setComment(\"\");\n      setRating(5);\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to submit review\", variant: \"destructive\" });\n    },\n  });\n\n  if (vendorLoading) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading vendor...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!vendor) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold mb-2\">Vendor not found</h2>\n            <p className=\"text-muted-foreground\">The vendor you're looking for doesn't exist</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const initials = vendor.storeName\n    .split(\" \")\n    .map((n) => n[0])\n    .join(\"\")\n    .toUpperCase()\n    .slice(0, 2);\n\n  const trackContact = async (contactType: string) => {\n    try {\n      await fetch(\"/api/analytics/contact-click\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({\n          vendorId,\n          contactType,\n        }),\n      });\n    } catch (error) {\n      console.error(\"Error tracking contact:\", error);\n    }\n  };\n\n  const handleCall = () => {\n    if (vendor.phone) {\n      trackContact(\"phone\");\n      window.location.href = `tel:${vendor.phone}`;\n    }\n  };\n\n  const handleWhatsApp = () => {\n    if (vendor.whatsapp) {\n      trackContact(\"whatsapp\");\n      window.open(`https://wa.me/${vendor.whatsapp.replace(/\\D/g, \"\")}`, \"_blank\");\n    }\n  };\n\n  const handleEmail = () => {\n    if (vendor.email) {\n      trackContact(\"email\");\n      window.location.href = `mailto:${vendor.email}`;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n\n      <section className=\"py-16 bg-background flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"bg-card rounded-xl shadow-lg border border-border overflow-hidden mb-8\">\n            <div className=\"h-32 bg-gradient-to-r from-primary to-primary/70\"></div>\n            <div className=\"px-6 pb-6\">\n              <div className=\"flex flex-col md:flex-row md:items-start md:space-x-6 -mt-16\">\n                {vendor.logoUrl ? (\n                  <img\n                    src={vendor.logoUrl}\n                    alt={vendor.storeName}\n                    className=\"w-24 h-24 bg-card border-4 border-card rounded-xl object-cover mb-4 md:mb-0\"\n                    data-testid=\"img-vendor-logo\"\n                  />\n                ) : (\n                  <div className=\"w-24 h-24 bg-card border-4 border-card rounded-xl flex items-center justify-center mb-4 md:mb-0\">\n                    <span className=\"text-3xl font-bold text-primary\">{initials}</span>\n                  </div>\n                )}\n                <div className=\"flex-1\">\n                  <div className=\"md:mt-16\">\n                    <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-3\">\n                      <div>\n                        <h2 className=\"text-2xl font-bold mb-1\" data-testid=\"text-vendor-name\">\n                          {vendor.storeName}\n                        </h2>\n                        <p className=\"text-muted-foreground\">{vendor.description || \"Quality products for you\"}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-wrap gap-3 mt-4\">\n                      {vendor.phone && (\n                        <Button onClick={handleCall} className=\"contact-btn\" data-testid=\"button-call\">\n                          <Phone className=\"w-5 h-5 mr-2\" />\n                          Call Now\n                        </Button>\n                      )}\n                      {vendor.whatsapp && (\n                        <Button\n                          onClick={handleWhatsApp}\n                          className=\"contact-btn bg-[#25D366] hover:bg-[#25D366]/90\"\n                          data-testid=\"button-whatsapp\"\n                        >\n                          <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path d=\"M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z\" />\n                          </svg>\n                          WhatsApp\n                        </Button>\n                      )}\n                      {vendor.email && (\n                        <Button onClick={handleEmail} variant=\"secondary\" className=\"contact-btn\" data-testid=\"button-email\">\n                          <Mail className=\"w-5 h-5 mr-2\" />\n                          Email\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n            <div className=\"bg-card rounded-lg border border-border p-4 text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-1\" data-testid=\"text-product-count\">\n                {products.length}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Products</div>\n            </div>\n            <div className=\"bg-card rounded-lg border border-border p-4 text-center\">\n              <div className=\"flex items-center justify-center gap-2 mb-1\">\n                <Star className=\"w-6 h-6 fill-yellow-400 text-yellow-400\" />\n                <div className=\"text-3xl font-bold text-primary\" data-testid=\"text-average-rating\">\n                  {averageRating.toFixed(1)}\n                </div>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">{reviews.length} Reviews</div>\n            </div>\n          </div>\n\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle>Customer Reviews</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {user && (\n                <div className=\"mb-6\">\n                  {!showReviewForm ? (\n                    <Button onClick={() => setShowReviewForm(true)} data-testid=\"button-add-review\">\n                      Write a Review\n                    </Button>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Rating</label>\n                        <div className=\"flex gap-2\">\n                          {[1, 2, 3, 4, 5].map((star) => (\n                            <button\n                              key={star}\n                              type=\"button\"\n                              onClick={() => setRating(star)}\n                              data-testid={`button-rating-${star}`}\n                            >\n                              <Star\n                                className={`w-8 h-8 ${\n                                  star <= rating ? \"fill-yellow-400 text-yellow-400\" : \"text-muted-foreground\"\n                                }`}\n                              />\n                            </button>\n                          ))}\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Comment (optional)</label>\n                        <Textarea\n                          value={comment}\n                          onChange={(e) => setComment(e.target.value)}\n                          placeholder=\"Share your experience...\"\n                          rows={4}\n                          data-testid=\"textarea-review-comment\"\n                        />\n                      </div>\n                      <div className=\"flex gap-3\">\n                        <Button\n                          onClick={() => {\n                            createReviewMutation.mutate({\n                              vendorId: vendorId!,\n                              rating: rating.toString(),\n                              comment,\n                            });\n                          }}\n                          disabled={createReviewMutation.isPending}\n                          data-testid=\"button-submit-review\"\n                        >\n                          {createReviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => {\n                            setShowReviewForm(false);\n                            setComment(\"\");\n                            setRating(5);\n                          }}\n                          data-testid=\"button-cancel-review\"\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              <div className=\"space-y-4\">\n                {reviews.length === 0 ? (\n                  <p className=\"text-muted-foreground\">No reviews yet. Be the first to review!</p>\n                ) : (\n                  reviews.map((review) => (\n                    <div key={review.id} className=\"border-b border-border pb-4 last:border-0\" data-testid={`review-${review.id}`}>\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <div className=\"font-semibold\">{review.userName}</div>\n                        <div className=\"flex\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`w-4 h-4 ${\n                                i < parseFloat(review.rating) ? \"fill-yellow-400 text-yellow-400\" : \"text-muted-foreground\"\n                              }`}\n                            />\n                          ))}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {new Date(review.createdAt).toLocaleDateString()}\n                        </div>\n                      </div>\n                      {review.comment && <p className=\"text-muted-foreground\">{review.comment}</p>}\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div>\n            <h3 className=\"text-2xl font-bold mb-6\">Products from {vendor.storeName}</h3>\n            {productsLoading ? (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {[...Array(4)].map((_, i) => (\n                  <div key={i} className=\"bg-card rounded-xl border border-border p-4 animate-pulse\">\n                    <div className=\"w-full h-48 bg-muted rounded-lg mb-4\" />\n                    <div className=\"h-4 bg-muted rounded mb-2\" />\n                    <div className=\"h-4 bg-muted rounded w-2/3\" />\n                  </div>\n                ))}\n              </div>\n            ) : products.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <p className=\"text-muted-foreground\">No products available</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {products.map((product) => (\n                  <ProductCard key={product.id} product={{ ...product, vendor }} />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":15874},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/20  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-[60] grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      style={{ backgroundColor: \"#F5F5DC\", opacity: 1 }}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4465},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/20 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      style={{ backgroundColor: \"#F5F5DC\", opacity: 1 }}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3891},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/VendorAnalytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport Navbar from \"@/components/Navbar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, Phone, Mail, MessageSquare, TrendingUp } from \"lucide-react\";\nimport type { Vendor } from \"@shared/schema\";\n\ninterface AnalyticsData {\n  productViews: { productId: string; productName: string; viewCount: number }[];\n  contactClicks: { contactType: string; clickCount: number }[];\n}\n\nexport default function VendorAnalytics() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        variant: \"destructive\",\n        title: \"Authentication required\",\n        description: \"Please log in to view analytics\",\n      });\n      setTimeout(() => {\n        navigate(\"/\");\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast, navigate]);\n\n  const { data: vendor } = useQuery<Vendor | null>({\n    queryKey: [\"/api/vendors/me\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/vendors/me\");\n      if (res.status === 404) return null;\n      if (!res.ok) throw new Error(\"Failed to fetch vendor\");\n      return res.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  const { data: analytics, isLoading: analyticsLoading } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/analytics/vendor\", vendor?.id],\n    queryFn: async () => {\n      const res = await fetch(`/api/analytics/vendor/${vendor?.id}`);\n      if (!res.ok) throw new Error(\"Failed to fetch analytics\");\n      return res.json();\n    },\n    enabled: !!vendor?.id,\n  });\n\n  if (authLoading || !vendor) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-muted-foreground\">Loading...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!vendor) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold mb-2\">No Vendor Account</h2>\n            <p className=\"text-muted-foreground\">You need to create a vendor account to view analytics</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const totalViews = analytics?.productViews.reduce((sum, p) => sum + p.viewCount, 0) || 0;\n  const totalClicks = analytics?.contactClicks.reduce((sum, c) => sum + c.clickCount, 0) || 0;\n\n  const getContactIcon = (type: string) => {\n    switch (type) {\n      case \"phone\":\n        return <Phone className=\"w-5 h-5\" />;\n      case \"whatsapp\":\n        return <MessageSquare className=\"w-5 h-5\" />;\n      case \"email\":\n        return <Mail className=\"w-5 h-5\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n\n      <section className=\"py-16 bg-background flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">Analytics Dashboard</h1>\n            <p className=\"text-muted-foreground\">Track your product views and customer engagement</p>\n          </div>\n\n          {analyticsLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Eye className=\"w-5 h-5 text-primary\" />\n                      Total Product Views\n                    </CardTitle>\n                    <CardDescription>Number of times your products were viewed</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-4xl font-bold\" data-testid=\"text-total-views\">{totalViews}</p>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"w-5 h-5 text-primary\" />\n                      Total Contact Clicks\n                    </CardTitle>\n                    <CardDescription>Number of times customers clicked to contact you</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-4xl font-bold\" data-testid=\"text-total-clicks\">{totalClicks}</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Product Views Breakdown</CardTitle>\n                  <CardDescription>Views per product</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {analytics?.productViews && analytics.productViews.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {analytics.productViews.map((product) => (\n                        <div\n                          key={product.productId}\n                          className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n                          data-testid={`product-view-${product.productId}`}\n                        >\n                          <span className=\"font-medium\">{product.productName}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <Eye className=\"w-4 h-4 text-muted-foreground\" />\n                            <span className=\"font-bold\">{product.viewCount}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-muted-foreground\">No product views yet</p>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Contact Clicks Breakdown</CardTitle>\n                  <CardDescription>How customers are reaching out</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {analytics?.contactClicks && analytics.contactClicks.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {analytics.contactClicks.map((contact) => (\n                        <div\n                          key={contact.contactType}\n                          className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n                          data-testid={`contact-click-${contact.contactType}`}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            {getContactIcon(contact.contactType)}\n                            <span className=\"font-medium capitalize\">{contact.contactType}</span>\n                          </div>\n                          <span className=\"font-bold\">{contact.clickCount}</span>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-muted-foreground\">No contact clicks yet</p>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":8095},"client/src/pages/Wishlist.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport ProductCard from \"@/components/ProductCard\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Wishlist, Product, Vendor } from \"@shared/schema\";\n\nexport default function Wishlist() {\n  const { user } = useAuth();\n\n  const { data: wishlistItems = [], isLoading } = useQuery<(Wishlist & { product: Product; vendor: Vendor })[]>({\n    queryKey: [\"/api/wishlist\"],\n    enabled: !!user,\n  });\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <section className=\"py-16 bg-background flex-1\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n            <h1 className=\"text-3xl font-bold mb-4\">My Wishlist</h1>\n            <p className=\"text-muted-foreground mb-6\">Please log in to view your wishlist</p>\n            <Link href=\"/\">\n              <a className=\"text-primary hover:underline\">Go to Home</a>\n            </Link>\n          </div>\n        </section>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n\n      <section className=\"py-16 bg-background flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h1 className=\"text-3xl font-bold mb-8\" data-testid=\"heading-wishlist\">My Wishlist</h1>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"bg-card rounded-xl border border-border p-4 animate-pulse\">\n                  <div className=\"w-full h-48 bg-muted rounded-lg mb-4\" />\n                  <div className=\"h-4 bg-muted rounded mb-2\" />\n                  <div className=\"h-4 bg-muted rounded w-2/3\" />\n                </div>\n              ))}\n            </div>\n          ) : wishlistItems.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground mb-6\" data-testid=\"text-empty-wishlist\">Your wishlist is empty</p>\n              <Link href=\"/\">\n                <a className=\"text-primary hover:underline\">Browse products</a>\n              </Link>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {wishlistItems.map((item) => (\n                <ProductCard key={item.id} product={{ ...item.product, vendor: item.vendor }} />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2749},"create-icons.js":{"content":"const sharp = require('sharp');\nconst fs = require('fs');\n\nconst svgBuffer = fs.readFileSync('public/icon.svg');\n\nasync function createIcons() {\n  // Create 192x192 icon\n  await sharp(svgBuffer)\n    .resize(192, 192)\n    .png()\n    .toFile('public/icon-192.png');\n  \n  // Create 512x512 icon\n  await sharp(svgBuffer)\n    .resize(512, 512)\n    .png()\n    .toFile('public/icon-512.png');\n  \n  console.log('✅ Icons created successfully: icon-192.png, icon-512.png');\n}\n\ncreateIcons().catch(console.error);\n","size_bytes":505},"client/src/pages/BuyerBrowse.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Listing } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Phone, Mail, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\n\nexport default function BuyerBrowse() {\n  const [search, setSearch] = useState(\"\");\n  const [cropType, setCropType] = useState<string>(\"all\");\n\n  const { data: listings, isLoading } = useQuery<Listing[]>({\n    queryKey: [\"/api/listings\", { role: \"vendor\", cropType: cropType === \"all\" ? undefined : cropType, search: search || undefined }],\n    queryFn: async ({ queryKey }) => {\n      const [url, params] = queryKey as [string, { role?: string; cropType?: string; search?: string }];\n      const searchParams = new URLSearchParams();\n      if (params.role) searchParams.append(\"role\", params.role);\n      if (params.cropType) searchParams.append(\"cropType\", params.cropType);\n      if (params.search) searchParams.append(\"search\", params.search);\n      const res = await fetch(`${url}?${searchParams.toString()}`);\n      if (!res.ok) throw new Error(\"Failed to fetch listings\");\n      return res.json();\n    },\n  });\n\n  const filteredListings = listings || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-primary text-primary-foreground py-6 px-4\">\n        <div className=\"max-w-6xl mx-auto flex items-center gap-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-primary-foreground hover:bg-primary/80\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold\">Browse Products</h1>\n            <p className=\"text-primary-foreground/80\">Fresh crops from local vendors</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto p-4 space-y-6\">\n        <div className=\"flex gap-4 flex-col sm:flex-row\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search products...\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n          </div>\n          <Select value={cropType} onValueChange={setCropType}>\n            <SelectTrigger className=\"sm:w-48\" data-testid=\"select-filter-crop-type\">\n              <SelectValue placeholder=\"All crop types\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All crop types</SelectItem>\n              <SelectItem value=\"vegetables\">Vegetables</SelectItem>\n              <SelectItem value=\"fruits\">Fruits</SelectItem>\n              <SelectItem value=\"grains\">Grains</SelectItem>\n              <SelectItem value=\"livestock\">Livestock</SelectItem>\n              <SelectItem value=\"dairy\">Dairy</SelectItem>\n              <SelectItem value=\"other\">Other</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Loading products...</p>\n          </div>\n        ) : filteredListings.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">No products found</p>\n          </div>\n        ) : (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {filteredListings.map((listing) => (\n              <Link key={listing.id} href={`/listing/${listing.id}`}>\n                <Card className=\"card-hover cursor-pointer\" data-testid={`card-listing-${listing.id}`}>\n                  <CardHeader>\n                    {listing.imageUrl && (\n                      <img\n                        src={listing.imageUrl}\n                        alt={listing.itemName}\n                        className=\"w-full h-48 object-cover rounded-lg mb-4\"\n                        data-testid={`img-listing-${listing.id}`}\n                      />\n                    )}\n                    <CardTitle className=\"text-xl\">{listing.itemName}</CardTitle>\n                    <CardDescription>{listing.vendorName}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {listing.cropType && (\n                      <div className=\"inline-block px-3 py-1 bg-accent/20 text-accent-foreground rounded-full text-sm\">\n                        {listing.cropType}\n                      </div>\n                    )}\n                    {listing.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {listing.description}\n                      </p>\n                    )}\n                    <div className=\"text-2xl font-bold text-primary\">\n                      ${listing.price}\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        )}\n\n        <div className=\"text-center pt-8\">\n          <Link href=\"/questions\">\n            <Button variant=\"outline\" data-testid=\"button-view-questions\">\n              Learn About Orient - Post Questions\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5794},"client/src/pages/CropInfo.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { CropInfo as CropInfoType } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\n\nexport default function CropInfo() {\n  const [search, setSearch] = useState(\"\");\n\n  const { data: cropInfoList, isLoading } = useQuery<CropInfoType[]>({\n    queryKey: [\"/api/crop-info\", { search }],\n  });\n\n  const filteredInfo = cropInfoList || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-accent text-accent-foreground py-6 px-4\">\n        <div className=\"max-w-4xl mx-auto flex items-center gap-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-accent-foreground hover:bg-accent/80\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold\">Crop Information</h1>\n            <p className=\"text-accent-foreground/80\">Learn about different crops and farming</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search crop information...\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-crop-info\"\n          />\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Loading information...</p>\n          </div>\n        ) : filteredInfo.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <p className=\"text-muted-foreground mb-4\">No crop information available yet</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Check back later for educational content about crops and farming!\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {filteredInfo.map((info) => (\n              <Card key={info.id} data-testid={`card-crop-info-${info.id}`}>\n                <CardHeader>\n                  <CardTitle className=\"text-2xl\">{info.title}</CardTitle>\n                  {info.tags && info.tags.length > 0 && (\n                    <CardDescription>\n                      <div className=\"flex gap-2 flex-wrap mt-2\">\n                        {info.tags.map((tag, index) => (\n                          <span\n                            key={index}\n                            className=\"inline-block px-2 py-1 bg-muted rounded-full text-xs\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    </CardDescription>\n                  )}\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {info.mediaUrl && (\n                    <img\n                      src={info.mediaUrl}\n                      alt={info.title}\n                      className=\"w-full h-64 object-cover rounded-lg\"\n                      data-testid={`img-crop-info-${info.id}`}\n                    />\n                  )}\n                  <p className=\"text-foreground whitespace-pre-wrap\">{info.body}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3908},"client/src/pages/ListingDetail.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { Listing } from \"@shared/schema\";\nimport { Link, useParams, useLocation } from \"wouter\";\nimport { ArrowLeft, Phone, Mail, MessageCircle, Home, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function ListingDetail() {\n  const { id } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [vendorName, setVendorName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const { data: listing, isLoading } = useQuery<Listing>({\n    queryKey: [`/api/listings/${id}`],\n  });\n\n  const { data: vendorListings } = useQuery<Listing[]>({\n    queryKey: [\"/api/listings\", { role: \"vendor\", search: listing?.vendorName }],\n    queryFn: async ({ queryKey }) => {\n      const [url, params] = queryKey as [string, { role?: string; search?: string }];\n      const searchParams = new URLSearchParams();\n      if (params.role) searchParams.append(\"role\", params.role);\n      if (params.search) searchParams.append(\"search\", params.search);\n      const res = await fetch(`${url}?${searchParams.toString()}`);\n      if (!res.ok) throw new Error(\"Failed to fetch listings\");\n      return res.json();\n    },\n    enabled: !!listing,\n  });\n\n  const deleteListingMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"DELETE\", `/api/listings/${id}`, {\n        vendorName,\n        password,\n      });\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || \"Failed to delete listing\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/listings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Listing deleted successfully\",\n      });\n      setDeleteDialogOpen(false);\n      setLocation(\"/vendor/browse\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = () => {\n    if (!vendorName || !password) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter vendor name and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    deleteListingMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n  }\n\n  if (!listing) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <p className=\"text-muted-foreground\">Listing not found</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-primary text-primary-foreground py-6 px-4\">\n        <div className=\"max-w-4xl mx-auto flex items-center gap-4\">\n          <Link href=\"/buyer/browse\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-primary-foreground hover:bg-primary/80\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold\">{listing.itemName}</h1>\n            <p className=\"text-primary-foreground/80\">by {listing.vendorName}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n        <Card>\n          <CardHeader>\n            {listing.imageUrl && (\n              <img\n                src={listing.imageUrl}\n                alt={listing.itemName}\n                className=\"w-full h-96 object-cover rounded-lg mb-4\"\n                data-testid=\"img-listing-detail\"\n              />\n            )}\n            <CardTitle className=\"text-3xl\">{listing.itemName}</CardTitle>\n            <CardDescription className=\"text-lg\">{listing.vendorName}</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"text-4xl font-bold text-primary\">\n              ${listing.price}\n            </div>\n\n            {listing.cropType && (\n              <div className=\"inline-block px-4 py-2 bg-accent/20 text-accent-foreground rounded-full\">\n                {listing.cropType}\n              </div>\n            )}\n\n            {listing.description && (\n              <div>\n                <h3 className=\"font-semibold text-lg mb-2\">Description</h3>\n                <p className=\"text-foreground whitespace-pre-wrap\">{listing.description}</p>\n              </div>\n            )}\n\n            <div className=\"border-t pt-6\">\n              <h3 className=\"font-semibold text-lg mb-4\">Contact Vendor</h3>\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <Button\n                  asChild\n                  size=\"lg\"\n                  className=\"flex-1\"\n                  data-testid=\"button-call\"\n                >\n                  <a href={`tel:${listing.contactPhone}`}>\n                    <Phone className=\"h-5 w-5 mr-2\" />\n                    Call: {listing.contactPhone}\n                  </a>\n                </Button>\n                <Button\n                  asChild\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"flex-1\"\n                  data-testid=\"button-whatsapp\"\n                >\n                  <a href={`https://wa.me/${listing.contactPhone.replace(/[^0-9]/g, '')}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <MessageCircle className=\"h-5 w-5 mr-2\" />\n                    WhatsApp\n                  </a>\n                </Button>\n                <Button\n                  asChild\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"flex-1\"\n                  data-testid=\"button-email\"\n                >\n                  <a href={`mailto:${listing.contactEmail}`}>\n                    <Mail className=\"h-5 w-5 mr-2\" />\n                    Email\n                  </a>\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {vendorListings && vendorListings.length > 1 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>More from {listing.vendorName}</CardTitle>\n              <CardDescription>Other products from this vendor</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                {vendorListings\n                  .filter((item) => item.id !== listing.id)\n                  .map((item) => (\n                    <Link key={item.id} href={`/listing/${item.id}`}>\n                      <Card className=\"card-hover cursor-pointer\" data-testid={`card-suggestion-${item.id}`}>\n                        <CardHeader>\n                          {item.imageUrl && (\n                            <img\n                              src={item.imageUrl}\n                              alt={item.itemName}\n                              className=\"w-full h-32 object-cover rounded-lg mb-2\"\n                              data-testid={`img-suggestion-${item.id}`}\n                            />\n                          )}\n                          <CardTitle className=\"text-lg\">{item.itemName}</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"text-xl font-bold text-primary\">\n                            ${item.price}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </Link>\n                  ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"flex gap-4 justify-center flex-wrap\">\n          <Link href=\"/\">\n            <Button variant=\"outline\" size=\"lg\" data-testid=\"button-home\">\n              <Home className=\"h-5 w-5 mr-2\" />\n              Go Home\n            </Button>\n          </Link>\n          <Link href=\"/buyer/browse\">\n            <Button variant=\"outline\" size=\"lg\" data-testid=\"button-browse\">\n              Browse All Products\n            </Button>\n          </Link>\n          \n          <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n            <AlertDialogTrigger asChild>\n              <Button variant=\"destructive\" size=\"lg\" data-testid=\"button-delete-listing\">\n                <Trash2 className=\"h-5 w-5 mr-2\" />\n                Delete Listing\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Delete Listing</AlertDialogTitle>\n                <AlertDialogDescription>\n                  To delete this listing, please confirm your vendor name and password.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"vendor-name\">Vendor Name</Label>\n                  <Input\n                    id=\"vendor-name\"\n                    placeholder=\"Enter your vendor name\"\n                    value={vendorName}\n                    onChange={(e) => setVendorName(e.target.value)}\n                    data-testid=\"input-delete-vendor-name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    data-testid=\"input-delete-password\"\n                  />\n                </div>\n              </div>\n              <AlertDialogFooter>\n                <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={(e) => {\n                    e.preventDefault();\n                    handleDelete();\n                  }}\n                  disabled={deleteListingMutation.isPending}\n                  data-testid=\"button-confirm-delete\"\n                >\n                  {deleteListingMutation.isPending ? \"Deleting...\" : \"Delete\"}\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11228},"client/src/pages/RoleSelection.tsx":{"content":"import { Link } from \"wouter\";\nimport { Store, ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport Navbar from \"@/components/Navbar\";\nimport heroImage from \"@assets/stock_images/agricultural_field_c_5d66ae93.jpg\";\nimport vegetablesImage from \"@assets/stock_images/fresh_vegetables_har_b2005c0c.jpg\";\nimport farmlandImage from \"@assets/stock_images/pexels_farm_image.jpg\";\n\nexport default function RoleSelection() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      <div \n        className=\"relative h-72 bg-cover bg-center\"\n        style={{ backgroundImage: `url(${heroImage})` }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-b from-black/60 via-black/50 to-black/70\" />\n        <div className=\"relative h-full flex flex-col items-center justify-center text-white px-4\">\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-4\" data-testid=\"text-app-title\">Orient</h1>\n          <p className=\"text-xl md:text-2xl text-white/90\">\n            Connecting Farmers with Buyers\n          </p>\n        </div>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto px-4 py-12 space-y-12\">\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          <div className=\"rounded-lg overflow-hidden shadow-md\">\n            <img \n              src={vegetablesImage} \n              alt=\"Fresh vegetables\" \n              className=\"w-full h-48 object-cover\"\n            />\n          </div>\n          <div className=\"rounded-lg overflow-hidden shadow-md\">\n            <img \n              src={farmlandImage} \n              alt=\"Farmland\" \n              className=\"w-full h-48 object-cover\"\n            />\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <Card className=\"card-hover cursor-pointer hover:border-primary transition-all\">\n            <Link href=\"/vendor/browse\">\n              <CardHeader className=\"text-center\">\n                <div className=\"mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                  <Store className=\"h-8 w-8 text-primary\" />\n                </div>\n                <CardTitle className=\"text-2xl\">I'm a Vendor</CardTitle>\n                <CardDescription className=\"text-base\">\n                  Sell your crops and food products\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button className=\"w-full\" size=\"lg\" data-testid=\"button-vendor-role\">\n                  Explore & Sell\n                </Button>\n              </CardContent>\n            </Link>\n          </Card>\n\n          <Card className=\"card-hover cursor-pointer hover:border-secondary transition-all\">\n            <Link href=\"/buyer/browse\">\n              <CardHeader className=\"text-center\">\n                <div className=\"mx-auto w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center mb-4\">\n                  <ShoppingCart className=\"h-8 w-8 text-secondary\" />\n                </div>\n                <CardTitle className=\"text-2xl\">I'm a Buyer</CardTitle>\n                <CardDescription className=\"text-base\">\n                  Browse fresh crops and products\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Button className=\"w-full bg-secondary hover:bg-secondary/90\" size=\"lg\" data-testid=\"button-buyer-role\">\n                  Browse Products\n                </Button>\n              </CardContent>\n            </Link>\n          </Card>\n        </div>\n\n        <div className=\"text-center\">\n          <Link href=\"/questions\">\n            <Button variant=\"outline\" size=\"lg\" data-testid=\"button-questions\">\n              Learn About Orient - Post Questions\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3955},"client/src/pages/VendorPostListing.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertListingSchema, type InsertListing } from \"@shared/schema\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, Upload, Loader2, Send } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function VendorPostListing() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const [isUploadingImage, setIsUploadingImage] = useState(false);\n\n  const form = useForm<InsertListing>({\n    resolver: zodResolver(insertListingSchema),\n    defaultValues: {\n      role: \"vendor\",\n      vendorName: \"\",\n      itemName: \"\",\n      description: \"\",\n      price: \"\",\n      cropType: \"\",\n      contactPhone: \"\",\n      contactEmail: \"\",\n      imageUrl: \"\",\n      password: \"\",\n    },\n  });\n\n  const createListingMutation = useMutation({\n    mutationFn: async (data: InsertListing) => {\n      const res = await apiRequest(\"POST\", \"/api/listings\", data);\n      if (!res.ok) {\n        const errorData = await res.json().catch(() => ({ message: \"Unknown error\" }));\n        throw new Error(errorData.message || \"Failed to create listing\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/listings\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Your listing has been posted.\",\n      });\n      setLocation(\"/buyer/browse\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to post listing. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setImageFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const onSubmit = async (data: InsertListing) => {\n    // If there's an image, upload it first\n    if (imageFile) {\n      setIsUploadingImage(true);\n      try {\n        // Get upload URL from backend\n        const uploadResponse = await fetch(\"/api/upload-image\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ fileName: imageFile.name }),\n        });\n        \n        if (!uploadResponse.ok) {\n          throw new Error(\"Failed to get upload URL\");\n        }\n\n        const { uploadUrl, publicUrl } = await uploadResponse.json();\n\n        // Upload image to GCS\n        const uploadResult = await fetch(uploadUrl, {\n          method: \"PUT\",\n          body: imageFile,\n          headers: {\n            \"Content-Type\": imageFile.type,\n          },\n        });\n\n        if (!uploadResult.ok) {\n          throw new Error(\"Failed to upload image\");\n        }\n\n        // Set the proxied URL in form data (publicUrl is now /api/images/...)\n        data.imageUrl = publicUrl;\n      } catch (error) {\n        console.error(\"Image upload error:\", error);\n        toast({\n          title: \"Warning\",\n          description: \"Failed to upload image, but listing will be created without it.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsUploadingImage(false);\n      }\n    }\n\n    createListingMutation.mutate(data);\n  };\n\n  const isLoading = createListingMutation.isPending || isUploadingImage;\n\n  return (\n    <div className=\"min-h-screen bg-background p-4\">\n      <div className=\"max-w-2xl mx-auto space-y-6 py-8\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-primary\">Post Your Product</h1>\n            <p className=\"text-muted-foreground\">Share your crops with buyers</p>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Product Details</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"vendorName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Your Name / Farm Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John's Farm\" {...field} data-testid=\"input-vendor-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"itemName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Product Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Fresh Tomatoes\" {...field} data-testid=\"input-item-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"cropType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Crop Type *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value || undefined}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-crop-type\">\n                            <SelectValue placeholder=\"Select crop type (required)\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"vegetables\">Vegetables</SelectItem>\n                          <SelectItem value=\"fruits\">Fruits</SelectItem>\n                          <SelectItem value=\"grains\">Grains</SelectItem>\n                          <SelectItem value=\"livestock\">Livestock</SelectItem>\n                          <SelectItem value=\"dairy\">Dairy</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Tell buyers about your product...\"\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"textarea-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"price\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Price *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"10.00\" {...field} data-testid=\"input-price\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"contactPhone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"+1234567890\" {...field} data-testid=\"input-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"contactEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address *</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"john@example.com\" {...field} data-testid=\"input-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password *</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Set a password to manage your listing\" {...field} data-testid=\"input-password\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"space-y-2\">\n                  <FormLabel>Product Image (Optional)</FormLabel>\n                  <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center\">\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleImageChange}\n                      className=\"hidden\"\n                      id=\"image-upload\"\n                      data-testid=\"input-image-upload\"\n                    />\n                    <label htmlFor=\"image-upload\" className=\"cursor-pointer\">\n                      {imagePreview ? (\n                        <img src={imagePreview} alt=\"Preview\" className=\"max-h-48 mx-auto rounded-lg\" />\n                      ) : (\n                        <div className=\"space-y-2\">\n                          <Upload className=\"h-10 w-10 mx-auto text-muted-foreground\" />\n                          <p className=\"text-sm text-muted-foreground\">Click to upload image</p>\n                        </div>\n                      )}\n                    </label>\n                  </div>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  size=\"lg\"\n                  disabled={isLoading}\n                  data-testid=\"button-submit-listing\"\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      {isUploadingImage ? \"Uploading...\" : \"Posting...\"}\n                    </>\n                  ) : (\n                    \"Post Item\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12029},"client/src/pages/VendorBrowse.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Listing } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Phone, Mail, Search, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\n\nexport default function VendorBrowse() {\n  const [search, setSearch] = useState(\"\");\n  const [cropType, setCropType] = useState<string>(\"all\");\n\n  const { data: listings, isLoading } = useQuery<Listing[]>({\n    queryKey: [\"/api/listings\", { role: \"vendor\", cropType: cropType === \"all\" ? undefined : cropType, search: search || undefined }],\n    queryFn: async ({ queryKey }) => {\n      const [url, params] = queryKey as [string, { role?: string; cropType?: string; search?: string }];\n      const searchParams = new URLSearchParams();\n      if (params.role) searchParams.append(\"role\", params.role);\n      if (params.cropType) searchParams.append(\"cropType\", params.cropType);\n      if (params.search) searchParams.append(\"search\", params.search);\n      const res = await fetch(`${url}?${searchParams.toString()}`);\n      if (!res.ok) throw new Error(\"Failed to fetch listings\");\n      return res.json();\n    },\n  });\n\n  const filteredListings = listings || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-primary text-primary-foreground py-6 px-4\">\n        <div className=\"max-w-6xl mx-auto flex items-center gap-4\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"text-primary-foreground hover:bg-primary/80\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold\">Browse Products</h1>\n            <p className=\"text-primary-foreground/80\">Fresh crops from local vendors</p>\n          </div>\n          <Link href=\"/vendor/post\">\n            <Button variant=\"secondary\" size=\"lg\" data-testid=\"button-upload-product\">\n              <Plus className=\"h-5 w-5 mr-2\" />\n              Upload Product\n            </Button>\n          </Link>\n        </div>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto p-4 space-y-6\">\n        <div className=\"flex gap-4 flex-col sm:flex-row\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search products...\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n          </div>\n          <Select value={cropType} onValueChange={setCropType}>\n            <SelectTrigger className=\"sm:w-48\" data-testid=\"select-filter-crop-type\">\n              <SelectValue placeholder=\"All crop types\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All crop types</SelectItem>\n              <SelectItem value=\"vegetables\">Vegetables</SelectItem>\n              <SelectItem value=\"fruits\">Fruits</SelectItem>\n              <SelectItem value=\"grains\">Grains</SelectItem>\n              <SelectItem value=\"livestock\">Livestock</SelectItem>\n              <SelectItem value=\"dairy\">Dairy</SelectItem>\n              <SelectItem value=\"other\">Other</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Loading products...</p>\n          </div>\n        ) : filteredListings.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">No products found</p>\n          </div>\n        ) : (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {filteredListings.map((listing) => (\n              <Link key={listing.id} href={`/listing/${listing.id}`}>\n                <Card className=\"card-hover cursor-pointer\" data-testid={`card-listing-${listing.id}`}>\n                  <CardHeader>\n                    {listing.imageUrl && (\n                      <img\n                        src={listing.imageUrl}\n                        alt={listing.itemName}\n                        className=\"w-full h-48 object-cover rounded-lg mb-4\"\n                        data-testid={`img-listing-${listing.id}`}\n                      />\n                    )}\n                    <CardTitle className=\"text-xl\">{listing.itemName}</CardTitle>\n                    <CardDescription>{listing.vendorName}</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {listing.cropType && (\n                      <div className=\"inline-block px-3 py-1 bg-accent/20 text-accent-foreground rounded-full text-sm\">\n                        {listing.cropType}\n                      </div>\n                    )}\n                    {listing.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {listing.description}\n                      </p>\n                    )}\n                    <div className=\"text-2xl font-bold text-primary\">\n                      ${listing.price}\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        )}\n\n        <div className=\"text-center pt-8\">\n          <Link href=\"/crop-info\">\n            <Button variant=\"outline\" data-testid=\"button-view-crop-info\">\n              Learn About Crops\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6043},"server/db-init.ts":{"content":"import { db } from \"./db\";\nimport { sql } from \"drizzle-orm\";\n\nexport async function initializeDatabase() {\n  try {\n    console.log(\"Initializing database tables...\");\n\n    // Create listings table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS listings (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        role VARCHAR NOT NULL,\n        vendor_name TEXT NOT NULL,\n        item_name TEXT NOT NULL,\n        description TEXT,\n        price DECIMAL(10, 2) NOT NULL,\n        crop_type TEXT,\n        contact_phone TEXT NOT NULL,\n        contact_email TEXT NOT NULL,\n        image_url TEXT,\n        password TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT NOW(),\n        updated_at TIMESTAMP DEFAULT NOW()\n      )\n    `);\n    console.log(\"✓ Created listings table\");\n\n    // Create crop_info table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS crop_info (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        title TEXT NOT NULL,\n        body TEXT NOT NULL,\n        media_url TEXT,\n        tags TEXT[],\n        created_at TIMESTAMP DEFAULT NOW()\n      )\n    `);\n    console.log(\"✓ Created crop_info table\");\n\n    // Create questions table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS questions (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        title TEXT NOT NULL,\n        body TEXT NOT NULL,\n        author_name TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT NOW()\n      )\n    `);\n    console.log(\"✓ Created questions table\");\n\n    // Create answers table\n    await db.execute(sql`\n      CREATE TABLE IF NOT EXISTS answers (\n        id VARCHAR PRIMARY KEY DEFAULT gen_random_uuid(),\n        question_id VARCHAR NOT NULL,\n        body TEXT NOT NULL,\n        author_name TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT NOW()\n      )\n    `);\n    console.log(\"✓ Created answers table\");\n\n    console.log(\"✓ Database initialization complete\");\n  } catch (error) {\n    console.error(\"Error initializing database:\", error);\n    throw error;\n  }\n}\n","size_bytes":2043},"client/src/pages/QuestionsPage.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertQuestionSchema, insertAnswerSchema, type Question, type Answer, type InsertQuestion, type InsertAnswer } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, MessageCircle, Send, Loader2, Search } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function QuestionsPage() {\n  const { toast } = useToast();\n  const [selectedQuestion, setSelectedQuestion] = useState<Question | null>(null);\n  const [isQuestionDialogOpen, setIsQuestionDialogOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const questionForm = useForm<InsertQuestion>({\n    resolver: zodResolver(insertQuestionSchema),\n    defaultValues: {\n      title: \"\",\n      body: \"\",\n      authorName: \"\",\n    },\n  });\n\n  const answerForm = useForm<InsertAnswer>({\n    resolver: zodResolver(insertAnswerSchema),\n    defaultValues: {\n      questionId: \"\",\n      body: \"\",\n      authorName: \"\",\n    },\n  });\n\n  const { data: questions = [], isLoading: questionsLoading } = useQuery<Question[]>({\n    queryKey: [\"/api/questions\", searchQuery],\n    queryFn: async () => {\n      const url = searchQuery \n        ? `/api/questions?search=${encodeURIComponent(searchQuery)}`\n        : \"/api/questions\";\n      const res = await fetch(url);\n      if (!res.ok) throw new Error(\"Failed to fetch questions\");\n      return res.json();\n    },\n  });\n\n  const { data: answers = [] } = useQuery<Answer[]>({\n    queryKey: [\"/api/questions\", selectedQuestion?.id, \"answers\"],\n    queryFn: async () => {\n      if (!selectedQuestion) return [];\n      const res = await fetch(`/api/questions/${selectedQuestion.id}/answers`);\n      if (!res.ok) throw new Error(\"Failed to fetch answers\");\n      return res.json();\n    },\n    enabled: !!selectedQuestion,\n  });\n\n  const createQuestionMutation = useMutation({\n    mutationFn: async (data: InsertQuestion) => {\n      const res = await apiRequest(\"POST\", \"/api/questions\", data);\n      if (!res.ok) {\n        const errorData = await res.json().catch(() => ({ message: \"Unknown error\" }));\n        throw new Error(errorData.message || \"Failed to create question\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Your question has been posted.\",\n      });\n      questionForm.reset();\n      setIsQuestionDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to post question. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createAnswerMutation = useMutation({\n    mutationFn: async (data: InsertAnswer) => {\n      const res = await apiRequest(\"POST\", \"/api/answers\", data);\n      if (!res.ok) {\n        const errorData = await res.json().catch(() => ({ message: \"Unknown error\" }));\n        throw new Error(errorData.message || \"Failed to create answer\");\n      }\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\", selectedQuestion?.id, \"answers\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Your answer has been posted.\",\n      });\n      answerForm.reset();\n      answerForm.setValue(\"questionId\", selectedQuestion?.id || \"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to post answer. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onQuestionSubmit = async (data: InsertQuestion) => {\n    createQuestionMutation.mutate(data);\n  };\n\n  const onAnswerSubmit = async (data: InsertAnswer) => {\n    if (!selectedQuestion) return;\n    createAnswerMutation.mutate({\n      ...data,\n      questionId: selectedQuestion.id,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"bg-primary text-primary-foreground py-6 px-4\">\n        <div className=\"max-w-6xl mx-auto flex items-center gap-4\">\n          <Link href=\"/\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-primary-foreground hover:bg-primary/80\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold\">Learn About Orient</h1>\n            <p className=\"text-primary-foreground/80\">Post questions and get answers from the community</p>\n          </div>\n          <Dialog open={isQuestionDialogOpen} onOpenChange={setIsQuestionDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                variant=\"secondary\"\n                size=\"lg\"\n                className=\"hidden sm:flex\"\n                data-testid=\"button-ask-question\"\n              >\n                <MessageCircle className=\"mr-2 h-5 w-5\" />\n                Ask Question\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Ask a Question</DialogTitle>\n                <DialogDescription>\n                  Share your question with the community and get helpful answers.\n                </DialogDescription>\n              </DialogHeader>\n              <Form {...questionForm}>\n                <form onSubmit={questionForm.handleSubmit(onQuestionSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={questionForm.control}\n                    name=\"authorName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Your Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"John Doe\" {...field} data-testid=\"input-question-author\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={questionForm.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Question Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"What is...\" {...field} data-testid=\"input-question-title\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={questionForm.control}\n                    name=\"body\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Details</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Provide more details about your question...\"\n                            {...field}\n                            data-testid=\"textarea-question-body\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={createQuestionMutation.isPending}\n                    data-testid=\"button-submit-question\"\n                  >\n                    {createQuestionMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Posting...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"mr-2 h-4 w-4\" />\n                        Post Question\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto p-4 space-y-6\">\n        <Dialog open={isQuestionDialogOpen} onOpenChange={setIsQuestionDialogOpen}>\n          <DialogTrigger asChild>\n            <Button\n              variant=\"secondary\"\n              size=\"lg\"\n              className=\"w-full sm:hidden\"\n              data-testid=\"button-ask-question-mobile\"\n            >\n              <MessageCircle className=\"mr-2 h-5 w-5\" />\n              Ask Question\n            </Button>\n          </DialogTrigger>\n        </Dialog>\n\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search questions... (e.g., vendor, contact, upload)\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-questions\"\n          />\n        </div>\n\n        {questionsLoading ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">Loading questions...</p>\n          </div>\n        ) : questions.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\">No questions yet. Be the first to ask!</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {questions.map((question) => (\n              <Card\n                key={question.id}\n                className=\"card-hover cursor-pointer\"\n                onClick={() => setSelectedQuestion(question)}\n                data-testid={`card-question-${question.id}`}\n              >\n                <CardHeader>\n                  <CardTitle className=\"text-xl\">{question.title}</CardTitle>\n                  <CardDescription>\n                    Asked by {question.authorName} •{\" \"}\n                    {formatDistanceToNow(new Date(question.createdAt!), { addSuffix: true })}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground line-clamp-2\">{question.body}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {selectedQuestion && (\n        <Dialog open={!!selectedQuestion} onOpenChange={() => setSelectedQuestion(null)}>\n          <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl\">{selectedQuestion.title}</DialogTitle>\n              <DialogDescription>\n                Asked by {selectedQuestion.authorName} •{\" \"}\n                {formatDistanceToNow(new Date(selectedQuestion.createdAt!), { addSuffix: true })}\n              </DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6\">\n              <div className=\"border-b pb-4\">\n                <p className=\"text-foreground\">{selectedQuestion.body}</p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"font-semibold text-lg\">\n                  Answers ({answers.length})\n                </h3>\n\n                {answers.length === 0 ? (\n                  <p className=\"text-muted-foreground text-sm\">\n                    No answers yet. Be the first to answer!\n                  </p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {answers.map((answer) => (\n                      <Card key={answer.id} data-testid={`card-answer-${answer.id}`}>\n                        <CardHeader>\n                          <CardDescription>\n                            {answer.authorName} •{\" \"}\n                            {formatDistanceToNow(new Date(answer.createdAt!), { addSuffix: true })}\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                          <p>{answer.body}</p>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <Form {...answerForm}>\n                <form onSubmit={answerForm.handleSubmit(onAnswerSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={answerForm.control}\n                    name=\"authorName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Your Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"John Doe\" {...field} data-testid=\"input-answer-author\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={answerForm.control}\n                    name=\"body\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Your Answer</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Share your answer...\"\n                            {...field}\n                            data-testid=\"textarea-answer-body\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={createAnswerMutation.isPending}\n                    data-testid=\"button-submit-answer\"\n                  >\n                    {createAnswerMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Posting...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"mr-2 h-4 w-4\" />\n                        Post Answer\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":15252},"server/seed-questions.ts":{"content":"import { db } from \"./db\";\nimport { questions, answers } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nasync function seedQuestions() {\n  console.log(\"🌱 Starting to seed questions and answers...\\n\");\n\n  const questionsData = [\n    {\n      title: \"How do I contact a vendor?\",\n      body: \"I found a product I like and want to reach out to the seller. How can I contact them?\",\n      authorName: \"Sarah Johnson\",\n      answers: [\n        {\n          body: \"To contact a vendor on Orient, simply view any product listing and scroll down to the \\\"Contact Vendor\\\" section. You will find the vendor's phone number and email address displayed there. You can call them directly or send them an email to inquire about the product, discuss pricing, arrange pickup, or ask any questions you have. No account or login is required!\",\n          authorName: \"Orient Support Team\",\n        },\n      ],\n    },\n    {\n      title: \"How do I post an item for sale?\",\n      body: \"I am a vendor and want to list my products on Orient. What are the steps to upload an item?\",\n      authorName: \"Farm Owner Mike\",\n      answers: [\n        {\n          body: \"Posting an item on Orient is easy! First, go to the home page and click the \\\"Post Item\\\" button at the top. You will see a form where you need to fill in: your vendor name, item name, description, price, category (vegetables, fruits, grains, or livestock), contact phone, contact email, and a password. You can also upload a photo of your product. The password is important - you will need it later if you want to delete your listing. Once you fill everything out, click \\\"Post Listing\\\" and your item will be live on the marketplace immediately!\",\n          authorName: \"Farmer Joe\",\n        },\n      ],\n    },\n    {\n      title: \"How do I browse products on Orient?\",\n      body: \"I am new to Orient and want to see what products are available. How do I navigate the marketplace?\",\n      authorName: \"New User\",\n      answers: [\n        {\n          body: \"Browsing products on Orient is simple! When you open the app, you will see the home page with all available products displayed as cards. Each card shows the item name, vendor name, price, and category. You can scroll through all the listings to see what's available. If you want to see more details about a specific product, just tap on the product card and it will take you to the full product page with description, vendor contact information, and more details.\",\n          authorName: \"Happy Customer\",\n        },\n      ],\n    },\n    {\n      title: \"Can I filter products by category?\",\n      body: \"I am only interested in certain types of products. Is there a way to filter what I see?\",\n      authorName: \"Busy Shopper\",\n      answers: [\n        {\n          body: \"Yes! Orient has a category filter to help you find exactly what you are looking for. At the top of the home page, you will see a dropdown menu labeled \\\"Filter by Category\\\". Click on it and you can choose from: All Categories, Vegetables, Fruits, Grains, or Livestock. Select the category you want and the page will instantly show only products from that category. This makes it much easier to find specific types of products without scrolling through everything!\",\n          authorName: \"Tech Helper\",\n        },\n      ],\n    },\n    {\n      title: \"Do I need to create an account to use Orient?\",\n      body: \"I want to know if I need to sign up or register to browse and buy products.\",\n      authorName: \"Anonymous User\",\n      answers: [\n        {\n          body: \"No, you do not need to create an account to use Orient! The platform is designed to be simple and accessible for everyone. Buyers can browse all products and contact vendors without signing up or logging in. Vendors can post their products without creating an account - they just need to set a password for their listing so they can delete it later if needed. Orient is all about making it easy for farmers and buyers to connect without barriers!\",\n          authorName: \"Orient Team\",\n        },\n      ],\n    },\n    {\n      title: \"What is Orient?\",\n      body: \"I just heard about Orient. Can someone explain what this platform is for?\",\n      authorName: \"Curious Visitor\",\n      answers: [\n        {\n          body: \"Orient is a mobile-friendly marketplace platform that connects farmers and food vendors with buyers in their community. It is designed specifically for local food producers to showcase their fresh products like vegetables, fruits, grains, and livestock. Buyers can browse available products, see prices, read descriptions, and contact vendors directly. The platform is simple to use - no complicated signup process, no lengthy forms. Just post your products or browse what is available, and connect directly with local producers and customers!\",\n          authorName: \"Platform Admin\",\n        },\n      ],\n    },\n    {\n      title: \"How do I edit or delete my listing?\",\n      body: \"I posted an item but need to make changes or remove it. How can I do that?\",\n      authorName: \"Vendor Anna\",\n      answers: [\n        {\n          body: \"To delete your listing on Orient, go to the product page for the item you posted. At the bottom of the page, you will see a \\\"Delete Listing\\\" button. Click it and you will be asked to enter your vendor name and the password you set when you created the listing. Once you confirm, your listing will be permanently removed. Currently, Orient does not support editing listings - if you need to make changes, you will need to delete the old listing and create a new one with the updated information.\",\n          authorName: \"Vendor Support\",\n        },\n      ],\n    },\n    {\n      title: \"Are the products on Orient locally sourced?\",\n      body: \"I prefer to buy local. Can I find farmers and food vendors from my area on Orient?\",\n      authorName: \"Local Food Supporter\",\n      answers: [\n        {\n          body: \"Yes! Orient is specifically designed for local farmers and food vendors in your area. All products listed on the platform come from local vendors, farmers, and small food producers in your community. When you view a product, you can see the vendor's contact information and reach out to them directly to learn more about where their products come from, their farming practices, and delivery or pickup options. By using Orient, you are supporting local businesses and your local food economy!\",\n          authorName: \"Local Food Advocate\",\n        },\n      ],\n    },\n    {\n      title: \"How do I contact Orient Expo?\",\n      body: \"I have a question or need help with something on Orient. How can I reach out to the Orient team?\",\n      authorName: \"Community Member\",\n      answers: [\n        {\n          body: \"You can contact us directly through this Q&A section! Simply click the \\\"Ask Question\\\" button and write your question. In the title field, include \\\"for orient\\\" so we know it is directed to our team, and we will respond to your question as soon as possible. This is the best way to get help, report issues, or share feedback about the Orient platform.\",\n          authorName: \"Orient Expo Team\",\n        },\n      ],\n    },\n  ];\n\n  let questionsAdded = 0;\n  let answersAdded = 0;\n\n  for (const questionData of questionsData) {\n    // Check if question already exists\n    const existing = await db\n      .select()\n      .from(questions)\n      .where(eq(questions.title, questionData.title))\n      .limit(1);\n\n    if (existing.length > 0) {\n      console.log(`⏭️  Question already exists: \"${questionData.title}\"`);\n      continue;\n    }\n\n    // Insert question\n    const [newQuestion] = await db\n      .insert(questions)\n      .values({\n        title: questionData.title,\n        body: questionData.body,\n        authorName: questionData.authorName,\n      })\n      .returning();\n\n    console.log(`✅ Added question: \"${questionData.title}\"`);\n    questionsAdded++;\n\n    // Insert answers for this question\n    for (const answerData of questionData.answers) {\n      await db.insert(answers).values({\n        questionId: newQuestion.id,\n        body: answerData.body,\n        authorName: answerData.authorName,\n      });\n\n      answersAdded++;\n    }\n  }\n\n  console.log(\"\\n🎉 Seeding complete!\");\n  console.log(`   📝 Questions added: ${questionsAdded}`);\n  console.log(`   💬 Answers added: ${answersAdded}`);\n  console.log(`   ⏭️  Questions skipped (already exist): ${questionsData.length - questionsAdded}\\n`);\n}\n\n// Run the seed function\nseedQuestions()\n  .then(() => {\n    console.log(\"✨ All done!\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"❌ Error seeding questions:\", error);\n    process.exit(1);\n  });\n","size_bytes":8692},"client/src/hooks/usePWAInstall.ts":{"content":"import { useState, useEffect } from \"react\";\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>;\n  userChoice: Promise<{ outcome: \"accepted\" | \"dismissed\" }>;\n}\n\nexport function usePWAInstall() {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [isInstallable, setIsInstallable] = useState(false);\n  const [isIOS, setIsIOS] = useState(false);\n  const [isAndroid, setIsAndroid] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n\n  useEffect(() => {\n    const userAgent = window.navigator.userAgent.toLowerCase();\n    const isiOS = /iphone|ipad|ipod/.test(userAgent);\n    const isAndroidDevice = /android/.test(userAgent);\n    \n    setIsIOS(isiOS);\n    setIsAndroid(isAndroidDevice);\n\n    const checkInstalled = () => {\n      const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n      const isIOSStandalone = (window.navigator as any).standalone === true;\n      setIsInstalled(isStandalone || isIOSStandalone);\n    };\n\n    checkInstalled();\n\n    const handler = (e: Event) => {\n      e.preventDefault();\n      const promptEvent = e as BeforeInstallPromptEvent;\n      setDeferredPrompt(promptEvent);\n      setIsInstallable(true);\n    };\n\n    window.addEventListener(\"beforeinstallprompt\", handler);\n\n    return () => {\n      window.removeEventListener(\"beforeinstallprompt\", handler);\n    };\n  }, []);\n\n  const installApp = async () => {\n    if (!deferredPrompt) {\n      return false;\n    }\n\n    await deferredPrompt.prompt();\n    const choiceResult = await deferredPrompt.userChoice;\n    \n    if (choiceResult.outcome === \"accepted\") {\n      setDeferredPrompt(null);\n      setIsInstallable(false);\n      return true;\n    }\n    \n    return false;\n  };\n\n  const shareApp = async (): Promise<{ success: boolean; cancelled?: boolean; method?: 'share' | 'clipboard' }> => {\n    const shareData = {\n      title: 'Orient - Vendor Marketplace',\n      text: 'Check out Orient, a marketplace connecting farmers and food vendors with customers!',\n      url: window.location.origin,\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n        return { success: true, method: 'share' };\n      } catch (err) {\n        if ((err as Error).name === 'AbortError') {\n          return { success: false, cancelled: true };\n        }\n        console.error('Error sharing:', err);\n      }\n    }\n\n    try {\n      await navigator.clipboard.writeText(window.location.origin);\n      return { success: true, method: 'clipboard' };\n    } catch (err) {\n      console.error('Error copying to clipboard:', err);\n      return { success: false };\n    }\n  };\n\n  return {\n    isInstallable,\n    isIOS,\n    isAndroid,\n    isInstalled,\n    installApp,\n    shareApp,\n  };\n}\n","size_bytes":2806}},"version":1}